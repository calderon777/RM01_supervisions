---
title: "Supervision 1 —"
output: html_document
---

# Lab 1 — R Certification (LinkedIn Learning)
---

## Learning outcomes
By the end of this lab you will be able to:
1. Access **LinkedIn Learning** via the University’s UIS portal and sign in with SSO.
2. Select a **beginner‑level R course/learning path** that issues a certificate of completion.
3. Complete the course and **export your certificate** (PDF/share link).
4. Add the certificate to your **CV/LinkedIn profile**.
5. Run a short **tech‑check in RStudio** to prepare for Labs 2–4.

---

## Prerequisites
- University credentials for LinkedIn Learning access.  
- R and RStudio installed (you’ll run a small code check).  
- Stable internet connection.

---

## Part A — First‑time access to LinkedIn Learning
1. Follow the UIS guidance: **help.uis.cam.ac.uk/service/support/training/linkedin-learning-info** (opens the official instructions).  
2. Choose **Sign in** with your University account (SSO). If prompted, connect to an existing LinkedIn profile (optional, but helpful for saving certificates).

**Reflect:** What are the benefits/risks of linking your personal LinkedIn account to the institutional LinkedIn Learning access?

---

## Part B — Choose a beginner R certificate
1. In LinkedIn Learning, search for **“R Programming”** or **“R for Data Analysis”**.  
2. Pick a **Beginner** course or a **Learning Path** that issues a certificate upon completion.  
3. Skim the syllabus; confirm it covers: R basics (objects, vectors), data frames, importing data, and simple plots.

**Tip:** Short beginner certificates often take only a few hours. Pick one you can finish this week.

**Reflect:** Which topics in your chosen course align best with Planning, Growth & Regeneration (e.g., data import, plotting socio‑economic indicators)?

---

## Part C — Complete the course effectively
- Turn on **captions** and adjust playback speed for focus.  
- Download **exercise files** (if offered) and practice in RStudio.  
- Take brief notes; collect 3–5 commands you didn’t know before.  
- Mark lessons **Complete** as you go; attempt embedded quizzes.

**Reflect:** List three new R commands you learned and one common error you corrected.

---

## Part D — Export and submit your certificate
1. After finishing, open the course page → **Certificate** → **Download PDF** (or **Copy share link**).  
2. Save as `data/yourname_r_certificate.pdf`.  
3. Submit the PDF to the LMS (or share link as instructed in your module).

**Reflect:** Where will you showcase this credential (CV, LinkedIn, portfolio)? Why?

---

## Part E — Add to your LinkedIn profile (optional but recommended)
1. Open your LinkedIn profile → **Add profile section** → **Recommended** → **Licenses & Certifications**.  
2. **Name:** Course title. **Issuing organization:** LinkedIn Learning. **Credential URL:** paste the certificate share link (if available).  
3. Save.

**Reflect:** How might this certification support applications for placements or research roles in Land Economy?

---

## Part F — RStudio tech‑check for upcoming labs
Run these in RStudio to ensure you’re ready for Labs 2–4.

```{r}
R.version.string
sessionInfo()$running
```

Install key packages (run once):
```{r, eval=FALSE}
install.packages(c("learnr", "r4ds.tutorials", "readr", "readxl", "ggplot2"))
```

Verify they load and basic plotting works:
```{r}
library(ggplot2)
df <- data.frame(x = 1:10, y = (1:10)^0.5)
plot(df$x, df$y, type = "l", main = "Tech‑check: base plot", xlab = "x", ylab = "sqrt(x)")
```

**Reflect:** Did everything install and run without warnings? Capture any errors so we can fix them in class.

---

## Best practices
- **Use institutional access** so your progress and certificates are recognized and free to you.  
- **Timebox** study sessions (e.g., 30–45 min focus blocks).  
- **Practice while you watch**—replicate examples in RStudio, don’t just watch videos.  
- Keep a **snippets** file (your personal cheat‑sheet) with commands you’ll reuse in Labs 3–4.  
- Store all artifacts (notes, PDFs) in your course project folder for quick reference.

---

## Suggested Answers (indicative)
- **Part A:** Linking accounts preserves learning history and makes sharing easy; a potential risk is mixing personal and institutional data—use privacy settings and review permissions.  
- **Part B:** Data import and plotting directly support planning/regeneration tasks (e.g., reading ONS data, visualising indicators).  
- **Part C:** Example new commands: `readr::read_csv()`, `dplyr::mutate()`, `ggplot2::geom_line()`; common error: forgetting to load a package with `library()`.  
- **Part D:** Showcase on CV and LinkedIn; it signals foundational competency in R.  
- **Part E:** Certifications can strengthen internship or RA applications by evidencing practical skills.  
- **Part F:** If installs fail, note the exact error message; we’ll address proxies, permissions, or missing system libraries next lab.

---

*End of Lab 1*

# Lab 2 — Interactive R Learning (r4ds.tutorials + learnr + swirl)

---

## Learning outcomes
By the end of this lab you will be able to:
1. Launch and complete the **r4ds.tutorials** lesson **01-data-visualization** in RStudio.
2. Run a built‑in **learnr** tutorial (**ex-data-basics**) and submit answers in an interactive pane.
3. Use **swirl** from the Console (install a course, resume lessons, check progress).
4. Compare the strengths of r4ds.learnr tutorials vs. swirl for your own study plan.

---

## Prerequisites
- R (≥ 4.1) and RStudio.
- Packages (install once):

```{r, eval=FALSE}
install.packages(c("learnr", "r4ds.tutorials", "swirl"))
```

> Tip: If tutorials don’t appear in RStudio’s **Tutorial** tab after installation, restart R.

---

## Part A — r4ds.tutorials: *01-data-visualization*
This runs as an interactive tutorial in RStudio’s **Tutorial** pane.

```{r, eval=FALSE}
# Option 1: via code
learnr::run_tutorial("01-data-visualization", package = "r4ds.tutorials")

# Option 2: discover tutorials installed on your system
learnr::available_tutorials("r4ds.tutorials")
```

**Do this:**
1. Start and complete the tutorial. Use the *Show in New Window* icon if the pane is small.
2. When you reach the **Submit** page, follow its instructions (we won’t collect submissions in this lab, just finish to the end).

**Reflect:**
- What’s the difference between **aesthetics** (e.g., `aes(x, y, color)`) and **geoms** (e.g., `geom_point()`, `geom_line()`)?
- Name two plot improvements you used (labels, theme, scales, facets).

---

## Part B — learnr: *ex-data-basics*
This is a short core tutorial bundled with **learnr**.

```{r, eval=FALSE}
learnr::run_tutorial("ex-data-basics", package = "learnr")
```

**Do this:**
1. Complete all exercises; click **Run** and **Submit Answer** for each.
2. If you get stuck, open the **Hint** dropdowns.

**Reflect:**
- Which data types/structures did you manipulate (vectors, data frames)?
- One mistake you made and how the tutorial feedback helped you fix it.

---

## Part C — swirl (console‑based)
**swirl** runs entirely in the Console and saves your progress.

```{r, eval=FALSE}
# Install/run swirl
install.packages("swirl")
library(swirl)

# Start swirl
swirl()
# (enter your name when prompted)

# Install and start a course (first time only)
install_from_swirl("R Programming")   # or "R_Programming"

# At any time, leave swirl with
# bye()

# Check progress later
swirl::progress()
```

**Do this:**
- Install **R Programming** and complete the first lesson.
- Exit with `bye()` and verify progress with `swirl::progress()`.

**Reflect:**
- How does working in the Console (swirl) feel compared with the GUI tutorials? 
- Which mode gave you clearer feedback on wrong answers?

---

## Part D — Mini practice (5–10 min)
Create a tiny vector and compute a statistic, then plot a quick line:

```{r}
x <- 1:10
mean_x <- mean(x)
mean_x
plot(x, type = "l", main = "Quick line", ylab = "x")
abline(h = mean_x, lty = 2)
```

**Reflect:**
- Which approach (r4ds.tutorials, learnr, swirl) best prepared you to write and run this code independently?

---

## Best practices
- **Use learnr/r4ds.tutorials for guided practice** with hints, auto‑checks, and saved state.
- **Use swirl** when you prefer keyboard‑only Console practice or have limited UI.
- Restart RStudio if tutorials don’t show; list what’s available with `learnr::available_tutorials()`.
- Keep your scripts open alongside tutorials to copy refined solutions into your own notes.

---

## Suggested Answers (indicative)
- **Part A:** Aesthetics map data → visual channels; geoms are the drawing layers (points, lines, bars). Improvements often include `labs()`, `scale_*_continuous()`, `theme_minimal()`, and `facet_wrap()`.
- **Part B:** Worked with vectors/data frames; common mistakes include mixing types (character vs numeric) or forgetting `<-`. Hints/feedback indicate expected objects or function names.
- **Part C:** Console is lightweight but less visual; learnr/r4ds tutorials give more structured feedback. Swirl progress persists via `swirl::progress()`; exit with `bye()`.
- **Part D:** Any of the three can help; most students report faster iteration in learnr/r4ds due to inline errors/hints.

---

*End of Lab 2*

# Lab 3 — Uploading Excel & CSV Files to R (PIPR)

---

## Learning outcomes
By the end of this lab you will be able to:
1. Download the **ONS Price Index of Private Rents (PIPR)** monthly workbook and save it in a tidy project structure.
2. Import **Excel** (`.xlsx/.xls`) and **CSV** files using RStudio’s **Import Dataset** UI **and** reproducible R code.
3. Deal with metadata/header rows via `skip`, set `col_names`, and verify column **types**.
4. Plot time series (index and annual % change) with base R and add reference lines.
5. Use help pages (e.g., `?plot`) and annotate charts for a policy audience.

---

## Prerequisites
- R (≥ 4.0) and RStudio.
- Project folder (e.g., `econ2545/`) with subfolder `data/`.
- Packages (install once):

```{r}
# install.packages(c("readxl", "readr"))
```

> **Tip:** Prefer file names without spaces, e.g. `pipr_monthly.xlsx` rather than `pipr monthly.xlsx`.

---

## Part A — Get PIPR monthly from ONS (manual steps)
1. Go to **ONS.gov.uk** and search **Price Index of Private Rents (PIPR)**.
2. On the dataset page, choose **Data** → **Download monthly workbook** (Excel) or **CSV** if available.
3. Save as `data/pipr_monthly.xlsx` inside your project.
4. (Optional) Open the file and identify the sheet that contains the **UK** and **country/region** series (e.g., Index and Annual % change).

**Reflect:** Why does PIPR (rents) provide a more direct lens on housing affordability and regional pressures than GDP for planning and regeneration?

---

## Part B — Import Excel via code (reproducible)
Use `readxl::read_excel()` and inspect column names to choose the UK series.

```{r}
library(readxl)
# Adjust 'sheet' and 'skip' depending on the workbook structure you download
pipr_raw <- read_excel("data/pipr_monthly.xlsx", sheet = 1, skip = 0)

# Inspect names to locate the date/month, UK Index, and UK annual % change columns
names(pipr_raw)

# Try to auto-detect typical column names (fallback: edit indices after you check names)
date_col     <- grep("Date|Month|Period", names(pipr_raw), ignore.case = TRUE)[1]
uk_index_col <- grep("UK.*Index|Index.*UK", names(pipr_raw), ignore.case = TRUE)[1]
uk_yoy_col   <- grep("Annual|%|YoY", names(pipr_raw), ignore.case = TRUE)[1]

# Subset and rename (edit if your columns differ)
pipr <- pipr_raw[, c(date_col, uk_index_col, uk_yoy_col)]
names(pipr) <- c("month", "uk_index", "uk_yoy")

str(pipr)
head(pipr, 6)
```

**Reflect:** Are the three selected columns correct for your workbook version? If not, which names should you use instead?

---

## Part C — Import via RStudio UI (reference)
- RStudio → **Import Dataset** → **From Excel** → select `data/pipr_monthly.xlsx`.
- Choose the relevant **sheet** and, if needed, set **Skip** for metadata rows.
- Set **Name** to `pipr` and verify column names (e.g., `month`, `uk_index`, `uk_yoy`).
- Click **Copy** to grab the generated R code, then **Import**.

> Paste the generated code in your script so your workflow is **reproducible**.

---

## Part D — Basic time‑series line plot (annual % change)
Plot PIPR annual % change for the UK as a line. Label the x‑axis sparsely to keep it readable.

```{r}
# Coerce to numeric if needed (sometimes imported as text)
if(!is.numeric(pipr$uk_yoy)) pipr$uk_yoy <- suppressWarnings(as.numeric(pipr$uk_yoy))

plot(pipr$uk_yoy, type = "l",
     xlab = "Month",
     ylab = "Private rents — annual % change",
     main = "UK private rents (PIPR): annual % change")

# Add sparse x-axis labels using the month column if available
labs_every <- 6
at_idx <- seq(1, nrow(pipr), by = labs_every)
axis(1, at = at_idx, labels = pipr$month[at_idx], las = 2)
```

**Reflect:** Identify periods of fastest rent inflation and periods of slowdown. What policy or macro factors might line up with these shifts?

---

## Part E — Add reference lines & customise
```{r}
# Zero line to distinguish rising vs falling annual change
abline(h = 0, lty = 2)

# Example: highlight a specific segment (edit indices after inspecting your data)
# abline(v = 60, col = "red")
```

**Reflect:** What extra annotations (e.g., policy changes, shocks) would make this plot more useful to a local authority audience?

---

## Part F — Import PIPR as CSV (alternative)
Option 1: Download the **CSV** from the PIPR page (if provided) and import with `readr::read_csv()`.

```{r}
library(readr)
pipr_csv <- read_csv("data/pipr_monthly.csv")  # adjust file name
names(pipr_csv)
head(pipr_csv)
```

Option 2: If a CSV isn’t provided, **save the relevant sheet as CSV** from Excel and import it.

```{r}
# Example: write out the subset you prepared, then re-import it
# write_csv(pipr, "data/pipr_monthly_subset.csv")
pipr_from_csv <- read_csv("data/pipr_monthly_subset.csv")
```

**Reflect:** Are types preserved across Excel vs CSV imports? Which route is more reliable/reproducible on your machine?

---

## Part G — Compare UK with a region (optional)
If your workbook includes regions (England, Wales, Scotland, Northern Ireland), select one annual % change column and plot together with the UK.

```{r}
# Attempt to find a regional YoY column (edit the pattern or use exact name after checking names())
reg_yoy_col <- grep("England.*Annual|Annual.*England|England.*%", names(pipr_raw), ignore.case = TRUE)[1]

if(!is.na(reg_yoy_col)){
  reg_yoy <- suppressWarnings(as.numeric(pipr_raw[[reg_yoy_col]]))
  plot(pipr$uk_yoy, type = "l", xlab = "Month", ylab = "Annual % change",
       main = "PIPR annual % change: UK vs England")
  lines(reg_yoy, lty = 3)
  legend("topleft", legend = c("UK", "England"), lty = c(1,3), bty = "n")
} else {
  message("No matching regional column automatically detected — inspect names() and set reg_yoy_col manually.")
}
```

**Reflect:** Does the region move broadly with the UK or diverge materially? What local factors could explain divergence?

---

## Part H — Help pages and plotting extras
Explore `?plot`, `curve()`, and `abline()`.

```{r}
# ?plot   # open during interactive session
curve(sin(x), from = 0, to = 6.28, xlab = "x", ylab = "y = sin(x)")
plot(1:10, type = "n", xlab = "x", ylab = "y")
abline(h = 0, v = 5, lty = 2)
```

**Reflect:** Which `plot()` arguments improved readability most (e.g., `las`, `xaxt`, `lwd`, `xlim`)?

---

## Part I — (Optional) Principles of Econometrics data
You can also explore textbook datasets with **PoEdata** for practice with scatter plots and `abline(lm())`.

```{r}
# install.packages("PoEdata")
library(PoEdata)

data("andy")
head(andy)
```

**Reflect:** Which numeric pairs in `andy` would make a sensible policy-relevant scatter (e.g., income vs expenditure)?

---

## Best practices
- **Reproducibility:** Prefer code over manual spreadsheet edits; paste RStudio’s generated import code into your script.
- **Paths & naming:** Use a `data/` subfolder; avoid spaces; use forward slashes.
- **Types & missing values:** Check with `str()`, `summary()`, `anyNA()`; coerce explicitly when needed.
- **Axis labelling:** Sparse, rotated labels help on monthly series.
- **Versioning:** Save dated copies of raw downloads (e.g., `pipr_monthly_2025-09-19.xlsx`).

---

## Further resources
- ONS **Price Index of Private Rents (PIPR)** — monthly
- R help: `?read_excel`, `?read_csv`, `?plot`, `?abline`, `?curve`
- R Data Import/Export manual

---

## Suggested Answers to Reflection Questions

> Indicative answers; specifics depend on your workbook version and the columns you select.

**Part A** — PIPR directly tracks private rents, aligning with housing affordability, regional pressures, and regeneration aims; GDP is broader and less targeted.

**Part B** — Correct columns usually include a date/month field plus UK Index and UK annual % change. Adjust `sheet/skip` and pick exact names after inspecting `names()`.

**Part C** — Pasting the generated code ensures others (and future you) can reproduce the import without the UI.

**Part D** — Rent inflation tends to cluster in waves; periods of rapid increases are visible as peaks, slowdowns as troughs. Index-by-month labelling clarifies timing.

**Part E** — Add a zero line; annotate notable policy changes or shocks; consider shading for periods of sustained acceleration.

**Part F** — CSV imports avoid Excel formatting quirks but require careful type checks. Both routes can be reproducible if code-driven.

**Part G** — Regions often co-move with the UK but can diverge due to local supply constraints, policy differences, or demand shocks.

**Part H** — Useful `plot()` args: `las` (label orientation), `xaxt/yaxt` (axis toggles), `lwd` (line width), `xlab/ylab` (clear labels), `xlim/ylim` (focus range).

**Part I** — Any sensible numeric pair (e.g., household income vs spending) supports regression line illustrations with `abline(lm(y ~ x, data = andy))`.

---

*End of Lab 3*

# Lab 4 — Data Visualisation

*Adapted from: [A Guide to Data Visualisation in R for Beginners](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)*

Link to files: course folder

---

## Learning outcomes
By the end of this lab you will be able to:
1. Explore the `state.x77` dataset in R.
2. Generate basic descriptive statistics.
3. Create simple plots using base R graphics.
4. Add labels, titles, and colours to plots.
5. Compare different chart types (scatter, bar, histogram, boxplot).
6. Use multi-panel displays to visualise multiple plots at once.

---

## Prerequisites
- R (≥ 4.0) and RStudio.
- No additional packages required beyond base R (optional: `ggplot2` for comparison).

---

## Part A — Load dataset
```{r}
data("state.x77")
state_data <- as.data.frame(state.x77)
```
**Reflect:** What variables are present in `state.x77`? Which relate most to planning and regeneration?

---

## Part B — Data exploration
```{r}
str(state_data)
```
**Reflect:** How many states (rows) and variables (columns) are there? Which are continuous, and which categorical (if any)?

---

## Part C — Beginning and end of the dataset
```{r}
head(state_data, 7)
tail(state_data, 5)
```
**Reflect:** What differences do you see between the early and later rows?

---

## Part D — Descriptive statistics
```{r}
summary(state_data)
```
**Reflect:** Which socio-economic indicators show the widest spread?

---

## Part E — Graphics package
```{r}
library(help = "graphics")
```
**Reflect:** From the help index, which plotting functions could be useful for socio-economic indicators?

---

## Part F — Plotting a single column
```{r}
plot(state_data$Population)
```
**Reflect:** What does this reveal about the distribution of state populations?

---

## Part G — Scatterplots
```{r}
plot(state_data$Income, state_data$Illiteracy)
```
**Reflect:** Do states with higher income tend to have lower illiteracy rates?

---

## Part H — Entire dataset plot
```{r}
plot(state_data)
```
**Reflect:** Which pairs of socio-economic indicators appear strongly related?

---

## Part I — Points and lines
```{r}
plot(state_data$Life.Exp, type = "b")
plot(state_data$Life.Exp, type = "h")
```
**Reflect:** Which representation communicates variation in life expectancy more clearly?

---

## Part J — Help
```{r}
?plot
```
**Reflect:** Identify one new argument from the help page that could improve your plot.

---

## Part K — Labels and titles
```{r}
plot(state_data$Income,
     xlab = "State Index",
     ylab = "Per Capita Income",
     main = "Income levels across US states",
     col = "blue")
```
**Reflect:** Do the labels improve clarity? Suggest improvements if needed.

---

## Part L — Horizontal bar plot
```{r}
barplot(state_data$Murder,
        main = "Murder Rate by State",
        xlab = "Murder arrests per 100,000",
        col = "purple",
        horiz = TRUE)
```
**Reflect:** Which states stand out with particularly high murder rates?

---

## Part M — Vertical bar plot
```{r}
barplot(state_data$Illiteracy,
        main = "Illiteracy Rate by State",
        xlab = "% Illiteracy",
        col = "orange",
        horiz = FALSE)
```
**Reflect:** How might this plot inform discussions on educational policy?

---

## Part N — Histograms
```{r}
hist(state_data$Income)

hist(state_data$Income,
     main = "Distribution of State Incomes",
     xlab = "Per Capita Income",
     col = "green")
```
**Reflect:** Is the income distribution symmetric, skewed, or multi-modal?

---

## Part O — Boxplots
```{r}
boxplot(state_data$Life.Exp)
```
**Reflect:** What does the boxplot reveal about state-level life expectancy?

---

## Part P — Multiple boxplots
```{r}
boxplot(state_data[, c("Population", "Income", "Illiteracy", "Life.Exp")],
        main = "Socio-economic Indicators across States")
```
**Reflect:** Which variable shows the most variability? The least?

---

## Part Q — Grid of charts
```{r}
par(mfrow = c(3,3), mar = c(2,5,2,1), las = 1, bty = "n")

plot(state_data$Population)
plot(state_data$Income, state_data$Illiteracy)
plot(state_data$Life.Exp, type = "c")
plot(state_data$Life.Exp, type = "s")
plot(state_data$Life.Exp, type = "h")
barplot(state_data$Income, main = "Income levels", col = "blue", horiz = TRUE)
hist(state_data$Murder)
boxplot(state_data$HS.Grad)
boxplot(state_data[, c("Population", "Income", "Illiteracy", "Life.Exp")],
        main = "Multiple Box plots")
```
**Reflect:** Which plots are most useful for policy discussions? Which are least useful?

---

## Best practices
- Always check the structure of socio-economic data before plotting.
- Match plot type to variable type.
- Add descriptive titles and labels.
- Avoid misleading graphics (bar plots for continuous data should be used cautiously).
- Visualise relationships before modelling.

---

## Further visualisation packages
- **lattice**: kernel density plots
- **ggplot2**: flexible grammar of graphics
- **plotly**: interactive plots
- **maps**: plot country maps

More resources: [towardsdatascience.com article](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)

---

## Suggested Answers to Reflection Questions

- **Part A:** Variables include Population, Income, Illiteracy, Life Expectancy, Murder rate, HS graduation, Frost, and Area. Most relate directly to planning and socio-economic development.
- **Part B:** 50 rows (states) and 8 columns. All variables are numeric.
- **Part C:** States differ widely in population and area; later rows (western states) often have larger land areas.
- **Part D:** Population and Area show the widest spread.
- **Part F:** Populations vary dramatically; California, New York, Texas are clear outliers.
- **Part G:** Clear negative relationship: higher income states tend to have lower illiteracy.
- **Part H:** Income vs Illiteracy, Life Expectancy vs Murder, and Population vs Area show strong patterns.
- **Part I:** Type "b" (points and lines) is clearer for showing gradual variation than type "h" (histogram-like lines).
- **Part J:** Useful arguments include `pch` (point type) and `col` (colour).
- **Part K:** Labels help; better axis labels might specify units (e.g., dollars, years).
- **Part L:** Southern states often stand out with higher murder rates.
- **Part M:** Highlights disparities in illiteracy across regions; relevant to education policy.
- **Part N:** Income is slightly right-skewed; most states cluster around the middle with a few richer outliers.
- **Part O:** Median life expectancy around 70 years; some outliers with lower values.
- **Part P:** Population and Area show the most variability; Life Expectancy the least.
- **Part Q:** Scatterplot of Income vs Illiteracy and histogram of Murder are most useful for policy; line-type plots of Life Expectancy less so.

---

## Suggested Answers to Reflection Questions

> These are concise, indicative answers. Local results may vary slightly depending on plotting parameters and ordering.

### Part A — Load dataset
- Variables in `state.x77`: `Population` (thousands), `Income` (per-capita, USD), `Illiteracy` (% age ≥25 illiterate), `Life.Exp` (years), `Murder` (per 100,000), `HS.Grad` (% high-school graduates), `Frost` (mean days ≤ 0°C), `Area` (square miles).  
- Planning relevance: population size/density, income, education, crime, longevity connect to regional disparities and regeneration priorities.

### Part B — Data exploration
- Dimensions: **50 rows × 8 columns**.  
- All columns are numeric/continuous; state names are row names (categorical identifier).

### Part C — Head/Tail
- Early vs late rows simply reflect alphabetical state ordering; no time component. Values vary widely (e.g., `Area`, `Population`).

### Part D — Descriptive statistics
- Widest spreads typically in `Area` and `Population` (large range, right-skew).  
- `Murder` and `Illiteracy` show noticeable skew and outliers.

### Part E — Graphics help
- Useful base functions: `pairs()`, `boxplot()`, `hist()`, `barplot()`, `stripchart()`, `dotchart()`, `qqnorm()`/`qqline()`.

### Part F — Single column plot (Population)
- Strong right-skew: a few very populous states (CA, NY, TX) vs many smaller states. Outliers at the high end.

### Part G — Scatter (Income vs Illiteracy)
- Clear **negative** association: higher income correlates with lower illiteracy.  
- Some states deviate from the trend but pattern holds overall.

### Part H — `pairs()` of entire dataset
- Notable patterns often seen:  
  - `Income` ↑ with `HS.Grad` and `Life.Exp`.  
  - `Murder` tends to be higher where `Illiteracy` is higher and `HS.Grad` is lower.  
  - `Area` weakly related to socio-economic outcomes (size ≠ prosperity).

### Part I — Types "b" vs "h" (Life.Exp)
- `type="b"` conveys point-to-point variability; `type="h"` emphasizes magnitudes from baseline.  
- For life expectancy, `"b"` is generally clearer.

### Part J — Help
- Examples of useful args: `pch` (point symbol), `cex` (size), `col` (colour), `xlim`/`ylim` (ranges), `main`/`sub` (titles/subtitles).

### Part K — Labels and titles (Income)
- Better labels: x = "State (index)", y = "Per-capita income (USD)", title = "Per-capita income by state".  
- Colour is decorative here unless encoding a grouping.

### Part L — Horizontal bar plot (Murder)
- States with higher values stand out (exact names depend on ordering). For rigorous identification, sort with `order()` or use a dotchart.

### Part M — Vertical bar plot (Illiteracy)
- Helps compare education disparities. Policy angle: target states with highest illiteracy for adult education and schooling investment.

### Part N — Histogram (Income)
- Typically unimodal, mild right-skew. Most states cluster around mid-income; a few richer states in the right tail. Bin choice affects apparent shape.

### Part O — Boxplot (Life.Exp)
- Median around ~70 years, relatively tight IQR; lower outliers indicate states with comparatively worse health outcomes.

### Part P — Multiple boxplots
- `Population` shows largest spread; `Life.Exp` the tightest. Outliers are more common in `Murder` and `Illiteracy`.

### Part Q — Grid of charts
- Most informative: scatterplots for relationships (e.g., `Income` vs `Illiteracy`), and boxplots/histograms for distributions.  
- Least informative: unsorted barplots of continuous variables.

### Best practices — summaries
- Inspect structure first; match plot to variable type; label clearly; avoid misleading encodings; explore visually before modelling.

*End of Lab 4*

# Lab 5 — Using GitHub Copilot in RStudio

## Goal
Learn to use GitHub Copilot inside RStudio to speed up routine coding, while staying in control of quality, privacy, and reproducibility.

---

## Learning outcomes
By the end you will be able to:
1. Enable and sign into GitHub Copilot in RStudio.
2. Accept, reject, or modify Copilot autocomplete suggestions effectively.
3. Use comment-first prompting to steer suggestions.
4. Diagnose and fix typical Copilot mistakes (wrong column names, redundant args, etc.).
5. Apply safe-use practices (privacy, determinism, avoiding “vibe coding”).

---

## Prerequisites
- R (≥ 4.3 recommended) and RStudio (a recent version with Copilot support).
- A GitHub account with Copilot access (student/educator plans are available).
- Packages: `tidyverse`, `palmerpenguins`, `readxl`, `ggplot2`.

```r
install.packages(c("tidyverse", "palmerpenguins", "readxl", "ggplot2"))
```

> Note: Column names for the `penguins` dataset may differ depending on source. Treat this as a feature to practice Copilot-aware debugging.

---

## Part A — Set up Copilot in RStudio (10–15 min)
1. Open RStudio → Tools → Global Options → Copilot.
2. Enable GitHub Copilot and sign in with GitHub.
3. Create a new R Script (`File → New File → R Script`).
4. Type some characters to see ghost text suggestions.
   - Tab to accept, Esc to dismiss, or keep typing to ignore.

### Reflection A
Explain in one sentence the difference between ghost text and code you’ve actually inserted.

---

## Part B — First suggestions with ggplot2 (20 min)
We’ll use `penguins` to practice.

1. Add a guiding comment:
```r
# Task: scatter plot of bill length (x) vs body mass (y), colour by species
```
2. Start a plot:
```r
library(ggplot2)
# library(palmerpenguins)
# penguins <- palmerpenguins::penguins

p <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, colour = species)) +
  geom_point()
```
3. Run and, if errors occur, inspect:
```r
glimpse(penguins)
names(penguins)
```
4. Fix names if needed (`bill_length_mm` → `bill_len`).

### Mini-exercises
- Add title, caption, and axis labels:
```r
# Add a title, caption, and nicer axis labels
```
- Add smoother:
```r
# Add a loess smoother without confidence band
```

### Reflection B
When is Copilot faster? When slower?

---

## Part C — Comment-first prompting for histograms (15 min)
1. Add a guiding comment:
```r
# Histogram of body mass by species, overlapping with transparency and an accessible palette
```
2. Inspect Copilot’s suggestion, remove redundant arguments, and adjust to:
```r
geom_histogram(position = "identity", alpha = 0.5)
```
3. Commit the cleaned version.

### Reflection C
Replace colour with `fill`, adjust legend, apply minimal theme.

---

## Part D — Loading local data safely (10–15 min)
Copilot does not know your file system.

1. Save `Scooby.xlsx` in a `data/` folder.
2. Load explicitly:
```r
library(readxl)
scooby <- read_xlsx("data/Scooby.xlsx")
```
3. Add prompt:
```r
# Quick EDA: glimpse, summary, and count episodes by network
```
4. Edit Copilot’s code before running.

### Reflection D
Why be explicit with data loading and library imports?

---

## Part E — Boxplots (15 min)
Visualise IMDb ratings by network.

1. Prompt:
```r
# Boxplot of IMDb (y) by network (x); tilt x labels; use fill instead of colour
```
2. Edit column names if needed.
3. Add improvements:
```r
# Make it horizontal, tidy legend, and add labs
```

### Extension E
Order networks by median rating.

---

## Part F — Best practices
- Privacy: Never expose credentials/confidential data.
- Non-determinism: Review suggestions before accepting.
- No vibe coding: Don’t accept what you don’t understand.
- Context helps: Use clean code and comments.
- Reproducibility: Remove redundant args, consider `renv`.

```r
install.packages("renv")
renv::init()
```

---

## Part G — Check-off & submission
- [ ] Copilot enabled and signed in.
- [ ] One scatter plot (corrected column names).
- [ ] One histogram (transparency + accessible palette).
- [ ] One boxplot (labels/theme improved).
- [ ] Reflection paragraph on Copilot.

Export script or Quarto doc → submit.

---

## TA rubric
- Setup (10%): Copilot enabled; script compiles.
- Code quality (40%): Reviewed/edited suggestions; correct names.
- Visuals (30%): Clear labels, sensible themes.
- Reflection (20%): Insightful, acknowledges limits.

---

## Troubleshooting
- Suggestions not appearing? Check Global Options → Copilot.
- Wrong dataset/columns? Run `names()`/`glimpse()`.
- Overconfident code? Scale back, test small steps.

---

## Further practice
- Rewrite prompts as comments for grouped summaries, joins, faceted plots.
- Compare Copilot vs manual solutions.
- Try Quarto docs where each chunk begins with a comment.

---

End of lab