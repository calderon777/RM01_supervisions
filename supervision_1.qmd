---
title: "Supervision 1"
format: html
---

## Lab 1 — Professional Development: R Certification via LinkedIn Learning

Professional certifications complement academic learning by providing industry-recognised credentials. For land economy graduates leading industries and entering consultancy, government, or research roles, demonstrating quantitative competency through multiple channels strengthens your professional profile and evidences commitment to continuous learning. 

---

### Learning outcomes

By the end of this lab you will be able to:

1. Access institutional resources / **LinkedIn Learning** for continuous professional development
2. Complete a **certified R programming course** that demonstrates foundational competency
3. Document your learning through **professional certification** pathways
4. Prepare your technical environment for **advanced coursework**
5. **Reflect critically** on skill acquisition in academic and professional contexts

---

### Prerequisites
- University credentials for LinkedIn Learning access.  
- R and RStudio installed (you’ll run a small code check).  

---

### Part A — First‑time access to LinkedIn Learning (20 minutes)
Establish access to University-provided LinkedIn Learning resources.

1. Follow the UIS guidance: **help.uis.cam.ac.uk/service/support/training/linkedin-learning-info** (opens the official instructions).

![](pics/uis_linkedin.PNG){width=100% fig-alt="login to LinkedIn Learning"}

2. Choose **Login** with your University account (SSO). If prompted, connect to an existing LinkedIn profile (optional, but helpful for saving certificates).

**Reflect:** Write bulletpoints that cover:

- **Role alignment.** Name two **job roles** relevant to Land Economy and state **one task per role** that this R certificate prepares you for.
- **Evidence & signalling.** How will you **showcase the skill**?
- **What are the next steps (4–6 weeks).** A mini-pathway after this certificate, e.g.:  
  1) R basics → 2) data wrangling/visualisation → 3) simple econometrics for policy/housing → 4) spatial basics (e.g., shapefiles) → 5) mini-project relevant to Land Economy.

---

### Part B — Course Selection and Academic Alignment (30 minutes)
1. In LinkedIn Learning, search for **“R Programming”** or **“R for Data Analysis”**.  
2. Pick a **Beginner** course or a **Learning Path** that issues a certificate upon completion.  
3. Skim the syllabus; confirm it covers: R basics (e.g. objects, vectors), data frames, importing data, and simple plots.

::: Tip 
Short beginner certificates often take only a few hours. Pick one you can finish this week.
:::

**Reflect:** a) Provide a **certificate/enrolment URL** or a screenshot proving enrolment. What challenges do you anticipate in acquiring programming skills alongside your substantive coursework? b) List three new R commands and three packages you learned and one common error you corrected.

---

### Part C — Add to your LinkedIn profile (optional but recommended)
1. Open your LinkedIn profile → **Add profile section** → **Recommended** → **Licenses & Certifications**.  
2. **Name:** Course title. **Issuing organization:** LinkedIn Learning. **Credential URL:** paste the certificate share link (if available).  
3. Save.

---

### Part D — RStudio tech‑check for upcoming labs
Run the following lines in RStudio to ensure you’re ready for the following Labs.

::: Tip
Recall you can run lines of code in R by hitting the keys ctrl+enter (commad+enter for Mac)
:::

```{r}
R.version.string
sessionInfo()$running
```

Install key packages (run once):
```{r, eval=FALSE}
install.packages(c("learnr", "r4ds.tutorials", "readr", "readxl", "ggplot2"))
```

Verify they load and basic plotting works:
```{r}
library(ggplot2)
df <- data.frame(x = 1:10, y = (1:10)^0.5)
plot(df$x, df$y, type = "l", main = "Tech check: base plot", xlab = "x", ylab = "sqrt(x)")
```

```{r}
# Test basic plotting capability
library(ggplot2)
test_data <- data.frame(
  year = 2010:2020,
  house_prices = c(250000, 260000, 275000, 285000, 290000, 
                   310000, 325000, 340000, 355000, 370000, 385000)
)

ggplot(test_data, aes(x = year, y = house_prices)) +
  geom_line(colour = "steelblue", linewidth = 1.2) +
  geom_point(colour = "darkred", linewidth = 2) +
  scale_y_continuous(labels = scales::comma_format()) +
  labs(
    title = "Hypothetical House Price Trends",
    subtitle = "System functionality test",
    x = "Year",
    y = "Average House Price (£)",
    caption = "Test data for R/RStudio verification"
  ) +
  theme_minimal()
```

**Reflect:** Did everything install and run without warnings? Capture any errors so we can fix them in class.

---

### Best practices

- **Practice while you watch**—replicate examples in RStudio, don’t just read the labs and watch videos.  
- Keep a **snippets** file (your personal cheat‑sheet) with commands you’ll reuse.  
- Store all artifacts (notes, PDFs) in your course project folder for quick reference.

---

*End of Lab 1*

## Lab 2 — Interactive R Learning: Building Programming Competency

---

### Learning outcomes

This lab exposes you to different pedagogical approaches in quantitative methods education while building the practical skills necessary for data-driven research in land economy.

By the end of this lab you will be able to:

1. Navigate **multiple R learning platforms** with different pedagogical approaches
2. Complete structured programming exercises with **immediate feedback**
3. Develop **troubleshooting skills** through guided problem-solving
4. Acquire **multiple ways of self-development** for your own study plan.

---

### Prerequisites
- R (≥ 4.1) and RStudio.
- Packages (install once):

```{r, eval=FALSE}
install.packages(c("learnr", "r4ds.tutorials", "swirl"))
```

::: Tip
If tutorials don’t appear in RStudio’s **Tutorial** tab after installation, restart R.
:::

---

### Part A — r4ds.tutorials: *01-data-visualization*
This runs as an interactive tutorial in RStudio’s **Tutorial** pane.

```{r, eval=FALSE}
# Option 1: via code
learnr::run_tutorial("01-data-visualization", package = "r4ds.tutorials")

# Option 2: discover tutorials installed on your system
learnr::available_tutorials("r4ds.tutorials")
```

**Do this:**
1. Start and complete the tutorial. Use the *Show in New Window* icon if the pane is small.
2. When you reach the **Submit** page, follow its instructions (we won’t collect submissions in this lab, just finish to the end).

**Reflect:**
- What’s the difference between **aesthetics** (e.g., `aes(x, y, color)`) and **geoms** (e.g., `geom_point()`, `geom_line()`)?
- Name two plot improvements you used (labels, theme, scales, facets).

---

### Part B — learnr: *ex-data-basics*
This is a short core tutorial bundled with **learnr**.

```{r, eval=FALSE}
learnr::run_tutorial("ex-data-basics", package = "learnr")
```

**Do this:**
1. Complete all exercises; click **Run** and **Submit Answer** for each.
2. If you get stuck, open the **Hint** dropdowns.

**Reflect:**
- Which data types/structures did you manipulate (vectors, data frames)?
- One mistake you made and how the tutorial feedback helped you fix it.

---

### Part C — swirl (console‑based)
**swirl** runs entirely in the Console and saves your progress.

```{r, eval=FALSE}
# Install/run swirl
install.packages("swirl")
library(swirl)

# Start swirl
swirl()
# (enter your name when prompted)

# Install and start a course (first time only)
install_from_swirl("R Programming")   # or "R_Programming"

# At any time, leave swirl with
# bye()

# Check progress later
swirl::progress()
```

**Do this:**
- Install **R Programming** and complete the first lesson.
- Exit with `bye()` and verify progress with `swirl::progress()`.

**Reflect:**
- How does working in the Console (swirl) feel compared with the GUI tutorials? 
- Which mode gave you clearer feedback on wrong answers?

---

### Part D — Mini practice (5–10 min)
Create a tiny vector and compute a statistic, then plot a quick line:

```{r}
x <- 1:10
mean_x <- mean(x)
mean_x
plot(x, type = "l", main = "Quick line", ylab = "x")
abline(h = mean_x, lty = 2)
```

**Reflect:**
- Which approach (r4ds.tutorials, learnr, swirl) best prepared you to write and run this code independently?

---

### Best practices
- **Use learnr/r4ds.tutorials for guided practice** with hints, auto‑checks, and saved state.
- **Use swirl** when you prefer keyboard‑only Console practice or have limited UI.
- Restart RStudio if tutorials don’t show; list what’s available with `learnr::available_tutorials()`.
- Keep your scripts open alongside tutorials to copy refined solutions into your own notes.

---

### Suggested Answers (indicative)
- **Part A:** Aesthetics map data → visual channels; geoms are the drawing layers (points, lines, bars). Improvements often include `labs()`, `scale_*_continuous()`, `theme_minimal()`, and `facet_wrap()`.
- **Part B:** Worked with vectors/data frames; common mistakes include mixing types (character vs numeric) or forgetting `<-`. Hints/feedback indicate expected objects or function names.
- **Part C:** Console is lightweight but less visual; learnr/r4ds tutorials give more structured feedback. Swirl progress persists via `swirl::progress()`; exit with `bye()`.
- **Part D:** Any of the three can help; most students report faster iteration in learnr/r4ds due to inline errors/hints.

---

*End of Lab 2*


## Lab 3 — Uploading Excel & CSV Files to R (PIPR)

---

### Learning outcomes
By the end of this lab you will be able to:
1. Download the **ONS Price Index of Private Rents (PIPR)** monthly workbook and save it in a tidy project structure.
2. Import **Excel** (`.xlsx/.xls`) and **CSV** files using RStudio’s **Import Dataset** UI **and** reproducible R code.
3. Deal with metadata/header rows via `skip`, set `col_names`, and verify column **types**.
4. Plot time series (index and annual % change) with base R and add reference lines.
5. Use help pages (e.g., `?plot`) and annotate charts for a policy audience.

---

### Prerequisites
- R (≥ 4.0) and RStudio.
- Project folder (e.g., `Rcoding/`) with subfolder `data/`.
- Packages (install once):

```{r}
# install.packages(c("readxl", "readr"))
```

> **Tip:** Prefer file names without spaces and lower-cases, e.g. `pipr_monthly.xls` rather than `pipr monthly.xls`.

---

### Part A — Get PIPR monthly from ONS (manual steps)
1. Go to **ONS.gov.uk** and search **Price Index of Private Rents (PIPR)**. This lab is using ONS data on Figure 4: Rent annual inflation slowed across the UK, Private rents annual inflation, across the UK, January 2016 to August 2025.

2. On the dataset page, choose **Data** → **Download monthly workbook** (Excel) or **CSV** if available.
3. Save as `data/pipr_monthly.xls` inside your project folder (e.g., `Rcoding/`) with subfolder `data/`.
4. (Optional) Open the file and identify the sheet that contains the **UK** and **country/regions**.

**Reflect:** Why does PIPR (rents) provide a more direct lens on housing affordability and regional pressures than GDP for planning and regeneration?

---

### Part B — Import Excel via code (reproducible)
Use `readxl::read_excel()` and inspect column names to choose the UK series.

```{r}
library(readxl)
# Adjust 'sheet' and 'skip' depending on the workbook structure you download.
# we use skip = 7 because there are headings in the first 7 rows of the dataset.
pipr_raw <- read_excel("data/pipr_monthly.xls", sheet = 1, skip = 7)

# Inspect names to locate the date/month, UK Index, and UK annual % change columns
names(pipr_raw)

# let's keep a copy of the raw data intact and create a new version of the data.

pipr<-pipr_raw

# rename column names for easiness. 
names(pipr) <- c("month", "uk", "england", "wales", "scotland", "n_ireland")

str(pipr)
head(pipr, 6)
```

**Reflect:** Are the three selected columns correct for your workbook version? If not, which names should you use instead?

---

### Part C — Import via RStudio UI (reference)
- RStudio → **Import Dataset** → **From Excel** → select `data/pipr_monthly.xls`.
- Choose the relevant **sheet** and, if needed, set **Skip** for metadata rows.
- Set **Name** to `pipr` and verify column names (e.g., `month`, `uk_index`, `uk_yoy`).
- Click **Copy** to grab the generated R code, then **Import**.

> Paste the generated code in your script so your workflow is **reproducible**.

---

### Part D — Basic time‑series line plot (annual % change)
Plot PIPR annual % change for the UK as a line. Label the x‑axis sparsely to keep it readable.

```{r}
plot(pipr$uk, type = "l",
     xlab = "",
     ylab = "Private rents — annual % change",
     main = "UK private rents (PIPR): annual % change",
     xaxt = "n")   # suppress default axis)

# Add sparse x-axis labels
labs_every <- 6
at_idx <- seq(1, nrow(pipr), by = labs_every)
axis(1, at = at_idx, labels = pipr$month[at_idx],
     las = 2, cex.axis = 0.7)  # smaller font for ticks

# Add subtitle (source) directly under the title
title(sub = "Source: ONS - Index of Private Housing Rental Prices (PIPR)", 
      cex.sub = 0.8, font.sub = 3)  # italic, smaller
# Reference line at 2% (inflation target)
abline(h = 2, lty = 2, col = "blue")

# Label it
text(x = min(pipr$month), y = 2, labels = "Inflation target (2%)",
     pos = 3, col = "blue", cex = 0.8)
```

**Reflect:** Identify periods of fastest rent inflation and periods of slowdown. What policy or macro factors might line up with these shifts?

---

### Part E — Blue reference line at 2% (Inflation Target) & customise

**Reflect:** What extra annotations (e.g., policy changes, shocks) would make this plot more useful to a local authority audience?

---

### Part F — Import PIPR as CSV (alternative)
Option 1: Download the **CSV** from the PIPR page (if provided) and import with `readr::read_csv()`.

```{r}
library(readr)
pipr_csv <- read_csv("data/pipr_monthly.csv")  # adjust file name
names(pipr_csv)
head(pipr_csv)
```

Option 2: If a CSV isn’t provided, **save the relevant sheet as CSV** from Excel and import it.

```{r}
# Example: write out the subset you prepared, then re-import it
# write_csv(pipr, "data/pipr_monthly_subset.csv")
pipr_from_csv <- read_csv("data/pipr_monthly.csv")
```

**Reflect:** Are types preserved across Excel vs CSV imports? Which route is more reliable/reproducible on your machine?

---

### Part G — Compare UK with a region (optional)
If your workbook includes regions (England, Wales, Scotland, Northern Ireland), select one annual % change column and plot together with the UK.

```{r}
# Attempt to find a regional YoY column (edit the pattern or use exact name after checking names())
reg_yoy_col <- grep("England.*Annual|Annual.*England|England.*%", names(pipr_raw), ignore.case = TRUE)[1]

if(!is.na(reg_yoy_col)){
  reg_yoy <- suppressWarnings(as.numeric(pipr_raw[[reg_yoy_col]]))
  plot(pipr$uk_yoy, type = "l", xlab = "Month", ylab = "Annual % change",
       main = "PIPR annual % change: UK vs England")
  lines(reg_yoy, lty = 3)
  legend("topleft", legend = c("UK", "England"), lty = c(1,3), bty = "n")
} else {
  message("No matching regional column automatically detected — inspect names() and set reg_yoy_col manually.")
}
```

**Reflect:** Does the region move broadly with the UK or diverge materially? What local factors could explain divergence?

---

### Part H — Help pages and plotting extras
Explore `?plot`, `curve()`, and `abline()`.

```{r}
# ?plot   # open during interactive session
curve(sin(x), from = 0, to = 6.28, xlab = "x", ylab = "y = sin(x)")
plot(1:10, type = "n", xlab = "x", ylab = "y")
abline(h = 0, v = 5, lty = 2)
```

**Reflect:** Which `plot()` arguments improved readability most (e.g., `las`, `xaxt`, `lwd`, `xlim`)?

---

### Part I — (Optional) Principles of Econometrics data
You can also explore textbook datasets with **PoEdata** for practice with scatter plots and `abline(lm())`.

```{r}
#install.packages(c("remotes", "pkgbuild"))   # helper packages
#pkgbuild::has_build_tools(debug = TRUE)       # should say TRUE on Windows
#remotes::install_github("ccolonescu/PoEdata")
library(PoEdata)

data("andy")
head(andy)
```

**Reflect:** Which numeric pairs in `andy` would make a sensible policy-relevant scatter (e.g., income vs expenditure)?

---

### Best practices
- **Reproducibility:** Prefer code over manual spreadsheet edits; paste RStudio’s generated import code into your script.
- **Paths & naming:** Use a `data/` subfolder; avoid spaces; use forward slashes.
- **Types & missing values:** Check with `str()`, `summary()`, `anyNA()`; coerce explicitly when needed.
- **Axis labelling:** Sparse, rotated labels help on monthly series.
- **Versioning:** Save dated copies of raw downloads (e.g., `pipr_monthly_2025-09-19.xlsx`).

---

### Further resources
- ONS **Price Index of Private Rents (PIPR)** — monthly
- R help: `?read_excel`, `?read_csv`, `?plot`, `?abline`, `?curve`
- R Data Import/Export manual

---

### Suggested Answers to Reflection Questions

> Indicative answers; specifics depend on your workbook version and the columns you select.

**Part A** — PIPR directly tracks private rents, aligning with housing affordability, regional pressures, and regeneration aims; GDP is broader and less targeted.

**Part B** — Correct columns usually include a date/month field plus UK Index and UK annual % change. Adjust `sheet/skip` and pick exact names after inspecting `names()`.

**Part C** — Pasting the generated code ensures others (and future you) can reproduce the import without the UI.

**Part D** — Rent inflation tends to cluster in waves; periods of rapid increases are visible as peaks, slowdowns as troughs. Index-by-month labelling clarifies timing.

**Part E** — Add a zero line; annotate notable policy changes or shocks; consider shading for periods of sustained acceleration.

**Part F** — CSV imports avoid Excel formatting quirks but require careful type checks. Both routes can be reproducible if code-driven.

**Part G** — Regions often co-move with the UK but can diverge due to local supply constraints, policy differences, or demand shocks.

**Part H** — Useful `plot()` args: `las` (label orientation), `xaxt/yaxt` (axis toggles), `lwd` (line width), `xlab/ylab` (clear labels), `xlim/ylim` (focus range).

**Part I** — Any sensible numeric pair (e.g., household income vs spending) supports regression line illustrations with `abline(lm(y ~ x, data = andy))`.

---

*End of Lab 3*

## Lab 4 — Data Visualisation

*Adapted from: [A Guide to Data Visualisation in R for Beginners](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)*

Link to files: course folder

---

### Learning outcomes
By the end of this lab you will be able to:
1. Explore the `state.x77` dataset in R.
2. Generate basic descriptive statistics.
3. Create simple plots using base R graphics.
4. Add labels, titles, and colours to plots.
5. Compare different chart types (scatter, bar, histogram, boxplot).
6. Use multi-panel displays to visualise multiple plots at once.

---

### Prerequisites
- R (≥ 4.0) and RStudio.
- No additional packages required beyond base R (optional: `ggplot2` for comparison).

---

### Part A — Load dataset
```{r}
library(datasets)
data("state.x77")
state_data <- as.data.frame(state.x77)
```
**Reflect:** What variables are present in `state.x77`? Which relate most to planning and regeneration?

---

### Part B — Data exploration
```{r}
str(state_data)
```
**Reflect:** How many states (rows) and variables (columns) are there? Which are continuous, and which categorical (if any)?

---

### Part C — Beginning and end of the dataset
```{r}
head(state_data, 7)
tail(state_data, 5)
```
**Reflect:** What differences do you see between the early and later rows?

---

### Part D — Descriptive statistics
```{r}
summary(state_data)
```
**Reflect:** Which socio-economic indicators show the widest spread?

---

### Part E — Graphics package
```{r}
library(help = "graphics")
```
**Reflect:** From the help index, which plotting functions could be useful for socio-economic indicators?

---

### Part F — Plotting a single column
```{r}
plot(state_data$Population)
```
**Reflect:** What does this reveal about the distribution of state populations?

---

### Part G — Scatterplots
```{r}
plot(state_data$Income, state_data$Illiteracy)
```
**Reflect:** Do states with higher income tend to have lower illiteracy rates?

---

### Part H — Entire dataset plot
```{r}
plot(state_data)
```
**Reflect:** Which pairs of socio-economic indicators appear strongly related?

---

### Part I — Points and lines
```{r}
plot(state_data$`Life Exp`, type = "b")
plot(state_data$`Life Exp`, type = "h")
```
**Reflect:** Which representation communicates variation in life expectancy more clearly?

---

### Part J — Help
```{r}
?plot
```
**Reflect:** Identify one new argument from the help page that could improve your plot.

---

### Part K — Labels and titles
```{r}
plot(state_data$Income,
     xlab = "State Index",
     ylab = "Per Capita Income",
     main = "Income levels across US states",
     col = "blue")
```
**Reflect:** Do the labels improve clarity? Suggest improvements if needed.

---

### Part L — Horizontal bar plot
```{r}
barplot(state_data$Murder,
        main = "Murder Rate by State",
        xlab = "Murder arrests per 100,000",
        col = "purple",
        horiz = TRUE)
```
**Reflect:** Which states stand out with particularly high murder rates?

---

### Part M — Vertical bar plot
```{r}
barplot(state_data$Illiteracy,
        main = "Illiteracy Rate by State",
        xlab = "% Illiteracy",
        col = "orange",
        horiz = FALSE)
```
**Reflect:** How might this plot inform discussions on educational policy?

---

### Part N — Histograms
```{r}
hist(state_data$Income)

hist(state_data$Income,
     main = "Distribution of State Incomes",
     xlab = "Per Capita Income",
     col = "green")
```
**Reflect:** Is the income distribution symmetric, skewed, or multi-modal?

---

### Part O — Boxplots
```{r}
boxplot(state_data$`Life Exp`)
```
**Reflect:** What does the boxplot reveal about state-level life expectancy?

---

### Part P — Multiple boxplots
```{r}
boxplot(state_data[, c("Population", "Income", "Illiteracy", "Life Exp")],
        main = "Socio-economic Indicators across States")
```
**Reflect:** Which variable shows the most variability? The least?

---

### Part Q — Grid of charts
```{r}
par(mfrow = c(3,3), mar = c(2,5,2,1), las = 1, bty = "n")

plot(state_data$Population)
plot(state_data$Income, state_data$Illiteracy)
plot(state_data$`Life Exp`, type = "c")
plot(state_data$`Life Exp`, type = "s")
plot(state_data$`Life Exp`, type = "h")
barplot(state_data$Income, main = "Income levels", col = "blue", horiz = TRUE)
hist(state_data$Murder)
boxplot(state_data$`HS Grad`)
boxplot(state_data[, c("Population", "Income", "Illiteracy", "Life Exp")],
        main = "Multiple Box plots")
```
**Reflect:** Which plots are most useful for policy discussions? Which are least useful?

---

### Best practices
- Always check the structure of socio-economic data before plotting.
- Match plot type to variable type.
- Add descriptive titles and labels.
- Avoid misleading graphics (bar plots for continuous data should be used cautiously).
- Visualise relationships before modelling.

---

### Further visualisation packages
- **lattice**: kernel density plots
- **ggplot2**: flexible grammar of graphics
- **plotly**: interactive plots
- **maps**: plot country maps

More resources: [towardsdatascience.com article](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)

---

### Suggested Answers to Reflection Questions

- **Part A:** Variables include Population, Income, Illiteracy, Life Expectancy, Murder rate, HS graduation, Frost, and Area. Most relate directly to planning and socio-economic development.
- **Part B:** 50 rows (states) and 8 columns. All variables are numeric.
- **Part C:** States differ widely in population and area; later rows (western states) often have larger land areas.
- **Part D:** Population and Area show the widest spread.
- **Part F:** Populations vary dramatically; California, New York, Texas are clear outliers.
- **Part G:** Clear negative relationship: higher income states tend to have lower illiteracy.
- **Part H:** Income vs Illiteracy, Life Expectancy vs Murder, and Population vs Area show strong patterns.
- **Part I:** Type "b" (points and lines) is clearer for showing gradual variation than type "h" (histogram-like lines).
- **Part J:** Useful arguments include `pch` (point type) and `col` (colour).
- **Part K:** Labels help; better axis labels might specify units (e.g., dollars, years).
- **Part L:** Southern states often stand out with higher murder rates.
- **Part M:** Highlights disparities in illiteracy across regions; relevant to education policy.
- **Part N:** Income is slightly right-skewed; most states cluster around the middle with a few richer outliers.
- **Part O:** Median life expectancy around 70 years; some outliers with lower values.
- **Part P:** Population and Area show the most variability; Life Expectancy the least.
- **Part Q:** Scatterplot of Income vs Illiteracy and histogram of Murder are most useful for policy; line-type plots of Life Expectancy less so.

---

### Suggested Answers to Reflection Questions

> These are concise, indicative answers. Local results may vary slightly depending on plotting parameters and ordering.

### Part A — Load dataset
- Variables in `state.x77`: `Population` (thousands), `Income` (per-capita, USD), `Illiteracy` (% age ≥25 illiterate), `Life.Exp` (years), `Murder` (per 100,000), `HS.Grad` (% high-school graduates), `Frost` (mean days ≤ 0°C), `Area` (square miles).  
- Planning relevance: population size/density, income, education, crime, longevity connect to regional disparities and regeneration priorities.

### Part B — Data exploration
- Dimensions: **50 rows × 8 columns**.  
- All columns are numeric/continuous; state names are row names (categorical identifier).

### Part C — Head/Tail
- Early vs late rows simply reflect alphabetical state ordering; no time component. Values vary widely (e.g., `Area`, `Population`).

### Part D — Descriptive statistics
- Widest spreads typically in `Area` and `Population` (large range, right-skew).  
- `Murder` and `Illiteracy` show noticeable skew and outliers.

### Part E — Graphics help
- Useful base functions: `pairs()`, `boxplot()`, `hist()`, `barplot()`, `stripchart()`, `dotchart()`, `qqnorm()`/`qqline()`.

### Part F — Single column plot (Population)
- Strong right-skew: a few very populous states (CA, NY, TX) vs many smaller states. Outliers at the high end.

### Part G — Scatter (Income vs Illiteracy)
- Clear **negative** association: higher income correlates with lower illiteracy.  
- Some states deviate from the trend but pattern holds overall.

### Part H — `pairs()` of entire dataset
- Notable patterns often seen:  
  - `Income` ↑ with `HS.Grad` and `Life.Exp`.  
  - `Murder` tends to be higher where `Illiteracy` is higher and `HS.Grad` is lower.  
  - `Area` weakly related to socio-economic outcomes (size ≠ prosperity).

### Part I — Types "b" vs "h" (Life.Exp)
- `type="b"` conveys point-to-point variability; `type="h"` emphasizes magnitudes from baseline.  
- For life expectancy, `"b"` is generally clearer.

### Part J — Help
- Examples of useful args: `pch` (point symbol), `cex` (size), `col` (colour), `xlim`/`ylim` (ranges), `main`/`sub` (titles/subtitles).

### Part K — Labels and titles (Income)
- Better labels: x = "State (index)", y = "Per-capita income (USD)", title = "Per-capita income by state".  
- Colour is decorative here unless encoding a grouping.

### Part L — Horizontal bar plot (Murder)
- States with higher values stand out (exact names depend on ordering). For rigorous identification, sort with `order()` or use a dotchart.

### Part M — Vertical bar plot (Illiteracy)
- Helps compare education disparities. Policy angle: target states with highest illiteracy for adult education and schooling investment.

### Part N — Histogram (Income)
- Typically unimodal, mild right-skew. Most states cluster around mid-income; a few richer states in the right tail. Bin choice affects apparent shape.

### Part O — Boxplot (Life.Exp)
- Median around ~70 years, relatively tight IQR; lower outliers indicate states with comparatively worse health outcomes.

### Part P — Multiple boxplots
- `Population` shows largest spread; `Life.Exp` the tightest. Outliers are more common in `Murder` and `Illiteracy`.

### Part Q — Grid of charts
- Most informative: scatterplots for relationships (e.g., `Income` vs `Illiteracy`), and boxplots/histograms for distributions.  
- Least informative: unsorted barplots of continuous variables.

### Best practices — summaries
- Inspect structure first; match plot to variable type; label clearly; avoid misleading encodings; explore visually before modelling.

*End of Lab 4*

## Lab 5 — Using GitHub Copilot in RStudio

### Goal
Learn to use GitHub Copilot inside RStudio to speed up routine coding, while staying in control of quality, privacy, and reproducibility.

---

### Learning outcomes
By the end you will be able to:
1. Enable and sign into GitHub Copilot in RStudio.
2. Accept, reject, or modify Copilot autocomplete suggestions effectively.
3. Use comment-first prompting to steer suggestions.
4. Diagnose and fix typical Copilot mistakes (wrong column names, redundant args, etc.).
5. Apply safe-use practices (privacy, determinism, avoiding “vibe coding”).

---

### Prerequisites
- R (≥ 4.3 recommended) and RStudio (a recent version with Copilot support).
- A GitHub account with Copilot access (student/educator plans are available).
- Packages: `tidyverse`, `palmerpenguins`, `readxl`, `ggplot2`.

```r
install.packages(c("tidyverse", "palmerpenguins", "readxl", "ggplot2"))
```

> Note: Column names for the `penguins` dataset may differ depending on source. Treat this as a feature to practice Copilot-aware debugging.

---

### Part A — Set up Copilot in RStudio (10–15 min)
1. Open RStudio → Tools → Global Options → Copilot.
2. Enable GitHub Copilot and sign in with GitHub.
3. Create a new R Script (`File → New File → R Script`).
4. Type some characters to see ghost text suggestions.
   - Tab to accept, Esc to dismiss, or keep typing to ignore.

### Reflection A
Explain in one sentence the difference between ghost text and code you’ve actually inserted.

---

### Part B — First suggestions with ggplot2 (20 min)
We’ll use `penguins` to practice.

1. Add a guiding comment:
```r
# Task: scatter plot of bill length (x) vs body mass (y), colour by species
```
2. Start a plot:
```r
library(ggplot2)
# library(palmerpenguins)
# penguins <- palmerpenguins::penguins

p <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, colour = species)) +
  geom_point()
```
3. Run and, if errors occur, inspect:
```r
glimpse(penguins)
names(penguins)
```
4. Fix names if needed (`bill_length_mm` → `bill_len`).

### Mini-exercises
- Add title, caption, and axis labels:
```r
# Add a title, caption, and nicer axis labels
```
- Add smoother:
```r
# Add a loess smoother without confidence band
```

### Reflection B
When is Copilot faster? When slower?

---

### Part C — Comment-first prompting for histograms (15 min)
1. Add a guiding comment:
```r
# Histogram of body mass by species, overlapping with transparency and an accessible palette
```
2. Inspect Copilot’s suggestion, remove redundant arguments, and adjust to:
```r
geom_histogram(position = "identity", alpha = 0.5)
```
3. Commit the cleaned version.

### Reflection C
Replace colour with `fill`, adjust legend, apply minimal theme.

---

### Part D — Loading local data safely (10–15 min)
Copilot does not know your file system.

1. Save `Scooby.xlsx` in a `data/` folder.
2. Load explicitly:
```r
library(readxl)
scooby <- read_xlsx("data/Scooby.xlsx")
```
3. Add prompt:
```r
# Quick EDA: glimpse, summary, and count episodes by network
```
4. Edit Copilot’s code before running.

### Reflection D
Why be explicit with data loading and library imports?

---

### Part E — Boxplots (15 min)
Visualise IMDb ratings by network.

1. Prompt:
```r
# Boxplot of IMDb (y) by network (x); tilt x labels; use fill instead of colour
```
2. Edit column names if needed.
3. Add improvements:
```r
# Make it horizontal, tidy legend, and add labs
```

### Extension E
Order networks by median rating.

---

### Part F — Best practices
- Privacy: Never expose credentials/confidential data.
- Non-determinism: Review suggestions before accepting.
- No vibe coding: Don’t accept what you don’t understand.
- Context helps: Use clean code and comments.
- Reproducibility: Remove redundant args, consider `renv`.

```r
install.packages("renv")
renv::init()
```

---

### Part G — Check-off & submission
- [ ] Copilot enabled and signed in.
- [ ] One scatter plot (corrected column names).
- [ ] One histogram (transparency + accessible palette).
- [ ] One boxplot (labels/theme improved).
- [ ] Reflection paragraph on Copilot.

Export script or Quarto doc → submit.

---

### TA rubric
- Setup (10%): Copilot enabled; script compiles.
- Code quality (40%): Reviewed/edited suggestions; correct names.
- Visuals (30%): Clear labels, sensible themes.
- Reflection (20%): Insightful, acknowledges limits.

---

### Troubleshooting
- Suggestions not appearing? Check Global Options → Copilot.
- Wrong dataset/columns? Run `names()`/`glimpse()`.
- Overconfident code? Scale back, test small steps.

---

### Further practice
- Rewrite prompts as comments for grouped summaries, joins, faceted plots.
- Compare Copilot vs manual solutions.
- Try Quarto docs where each chunk begins with a comment.

---

End of lab