---
title: "Supervision 1"
format: html
--- 

## 🧪 Lab 1 — R Quickstart

### 🎯 Learning outcomes (you will be able to)
- Open RStudio and recognise the **Console, Script, Environment/History, Files/Plots/Help** panes.
- Create and run a short **R script** (comments, simple operations).
- Set your **working directory** to a course folder.
- Create and inspect basic **objects** (a scalar and a small matrix).
- Save your script for the next supervision.

### 🧰 Prerequisites
- Read "Welcome & Supervision Overview" section.
- R and RStudio installed.
- A course folder and subfolders on your machine where you will save scripts and other files: 
```
RM01_labs/
├── data/           # For raw datasets and imports
├── scripts/        # Your R code files  
├── outputs/        # Generated plots, tables, reports
├── certificates/   # Professional development documentation
└── reflections/    # Written responses to critical questions
```


### 📘 Introduction to R
After downloading and installing open RStudio, we will cover now some tutorials. 

👨‍💻 **Long Tutorial**

We would cover a brief introduction on this labs, students can use a longer tutorial for detailed learning at <https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf>


### A. Get oriented in RStudio

You need to have installed R and RStudio to continue with this lab. 

- Open Rstudio in your computer.

![On this picture, there are three panels 'the Console', 'The Environment', and 'The Plots, Help and Files' panel.](/pics/image7a.png)

- Let's choose a better appeareance for our RStudio. Click on Tools>Global Options.

![In RStudio, click on 'Tools' and 'Global Options'](/pics/image8.png)

- Afterwards, in the window "Options", click on "Appearance", RStudio theme: "Modern", Editor font: "Courier", Editor theme: Cobalt. Finally, click on "Apply"

![You are here by clicking on Tools>Global Options..>Appereance>Modern>Courier>Cobalt>Apply](/pics/image9.png)

---

### B. Your first script

1. Open a file to save the code for this session. Click on **File → New File → R Script**; or simply press Ctrl+Shift+N (command+shift+enter in Mac); this will open a new panel called 'Script' where we are going to write the commands for R. Change the name of the script to "lab_1", saving the script in the folder RM01_Labs/scripts/ **File → Save As → "lab_1"**

![Click on File>New File>R Script](/pics/image10.png)

2. Add a comment (starts with `#`.) On the script panel, type the caracter `#` and then write `'LAB ONE AND TODAY'S DATE'`. R will ignore any line of command starting with `#`. You can use `#` to add comments, titles, reminders within your R code/ R Script. 

Your R Script now shall look similar to this:

![Comments are crucial to learn R](/pics/image11.png)

The Rstudio screen has four windows or panels: 1. Console. 2. Environment and history. 3. Files, plots, packages and help. 4. The R script(s) and data view. The R script is where you keep a record of your work or commands - in a line by line basis. 

- On your script, type `getwd()` in line number '2' and hit the keys 'ctrl+enter' in your keyboard (The + indicates 'do it at the same time'), you dont need to press the key '+'. After 'running' line 2, you will see in the console panel the working directory (or folder) that R is using to download and upload files.

![This image shows how your R Script should look](/pics/image12.png)

![The outcome in the console -bottom panel after getwd()](/pics/image12a.png)


---

### C. Set your working directory
Choose your course file folder 📁. Recall we called the working folder  folder 'RM01_labs'. In RStudio' go to 'Session', 'Set Working Directory', 'Choose Directory', and select this folder.

![Create your folder and then click on Session>Set Working Directory>Choose Directory](/pics/image13.png)

The 'Console' panel renders `setwd(and a path/directory to your chosen folder in your computer)`. Copy and paste this output in line 3 from your Console to your R Script. Setting the directory with code and not 'clicks' will save you time.

![This is the code you shall copy and paste in your R Script, ignore '>'](/pics/image14.png)

![setwd() in your R Script](/pics/image15.png)

So far, we have created the following script:
```r
# LAB ONE 25/09/2025
getwd()
setwd("C:/Users/YOUR DIRECTORY/RM01_labs")
```
and this is the Console output:

```text
> # LAB ONE 25/09/2025
> getwd()
[1] "C:/Users/YOUR DIRECTORY/Documents"
> setwd("C:/Users/YOUT DIRECTORY/RM01_labs")
```

### D. First calculations & a matrix (3–4 min)

1. In your script, run: `5 * 5` (result should be `25` in the Console).

```{r}
#| label: console-demo
#| prompt: true     # show "> " before code lines
#| comment: ""      # no "##" before output lines
#| collapse: true   # interleave code and output like a console
#| echo: true
#| warning: false
#| message: false

5*5
```

2. Create a small matrix and run it. Use the following code, explanatory comments are written with #:
   ```r
   # A is an object, 
   # <- is similar to equal
   # 1:8 are the numbers from 1 to 8
   # nrow is the matrix number of rows = 4
   # ncol is the matrix number of columns = 2 
   A <- matrix(1:8, nrow = 4, ncol = 2)
   # The object A now has a matrix. Run the object A
   A
   ```
The outcome in the console shall be as follows:

```{r}
#| label: console-matrix
#| prompt: true     # show "> " before code lines
#| comment: ""      # no "##" before output lines
#| collapse: true   # interleave code and output like a console
#| echo: true
#| warning: false
#| message: false

# A is an object, 
   # <- is similar to equal
   # 1:8 are the numbers from 1 to 8
   # nrow is the matrix number of rows = 4
   # ncol is the matrix number of columns = 2 
   A <- matrix(1:8, nrow = 4, ncol = 2)
   # The object A now has a matrix. Run the object A
   A

```

- In brief, you created a matrix called 'A', with numbers from 1 to 8, with four rows and two columns.

---

### E. Inspect objects & view data

- Check the **Environment** tab to see objects you’ve created. 
- The tab **History** shows a list of commands used do far.

![Environment Panel](/pics/image18.png)

- To see the matrix A in a new window, type the command `View(A)` in your script and hit the keys 'ctrl+enter' to run that line , this will send you to a different tab. Afterwards, click on your R script to come back. 

```r
# LAB ONE 25/09/2025
getwd()
setwd("C:/Users/Cam/OneDrive - University of Cambridge/Cambridge 2025-26/RM01_labs")
5*5
# A is an object, 
# <- is similar to equal
# 1:8 are the numbers from 1 to 8
# nrow is the matrix number of rows = 4
# ncol is the matrix number of columns = 2 
A <- matrix(1:8, nrow = 4, ncol = 2)
# The object A now has a matrix. Run the object A
A
View(A)
```


### F. (Optional) Install and load a package

**The tab 'Packages'** shows the list of add-ons included in the installation of RStudio. Click on the tab 'Packages', if you check a box next to a package, that package is loaded into R, if not, any command related to that package won't work, you will need select it. You can also install other add-ons by clicking on the 'Install' icon.

Another way to install add-ons is to type the function `install.packages("name of the package")`, and then you will be able to open the library of commands of that package.

- In line 8, to install the package forecast, type `install.packages(“forecast”)` and hit ctrl+enter. If a window opens, you can hit yes to restart RStudio. See the picture below, make sure you do not get errors in the console. The sign '>' will show when R finishes running a line.

```r
# the function to install packages in R
# we use "forecast" as example
install.packages("forecast") # to install the package
library(forecast) # to activate the package 'forecast'
```
Remember to activate the package by typing 'library(the package)', for example, `library(forecast)` and ctrl+enter. This will activate all functions within the 'forecast' package.

Make sure there are no error messages in the installation, and if so, make sure to solve the issue before continuing.

The package forecast is used to analyse and predict time series (e.g. yearly house prices during the last 20 years).

**Script/Data View Window:**

•	Begin scripts with a comment for title and description using the hash character (#). Anything after the hash on the same line is considered a comment and is ignored by R.
•	Code can continue to the next line without a special character, but only if the previous line ends in a way that suggests continuation (e.g., a comma or unclosed brackets).
•	To run a line of code, position the cursor on the line and press Ctrl+Enter. For multiple lines, select them and press Ctrl+Enter.


**Console/Output Window:**

•	It's recommended to work in script mode for reusability.
•	Commands outside the script context can be typed at the bottom of the console, indicated by the ">" sign.
•	Press Enter to execute a command.
•	Use the up and down arrows to revisit and edit older lines of code previously typed into the console.

---

### 💾 Save your script
**File → Save** (e.g., `lab_1`) into your 'script' folder. **Remember to save your R Scripts after each supervision**, this will save you a lot time!

### ✅ Check‑off
- [ ] I can run code from a script (Ctrl+Enter).
- [ ] My working directory is set via `setwd()` at the top of the script.
- [ ] I created `A <- matrix(1:8, 4, 2)` and can see it in **Environment**.
- [ ] Script saved.



---

🏁 *End of Lab 1*
🛑 Remember to save your script 💾

---


## 🧪 Lab 2 — Professional Development: R Certification via LinkedIn Learning

Professional certifications complement academic learning by providing industry-recognised credentials. For land economy graduates leading industries and entering consultancy, government, or research roles, demonstrating quantitative competency through multiple channels strengthens your professional profile and evidences commitment to continuous learning. 

---

### Learning outcomes

By the end of this lab you will be able to:

1. Access institutional resources / **LinkedIn Learning** for continuous professional development
2. Complete a **certified R programming course** that demonstrates foundational competency
3. Document your learning through **professional certification** pathways
4. Prepare your technical environment for **advanced coursework**
5. **Reflect critically** on skill acquisition in academic and professional contexts

---

### Prerequisites
- University credentials for LinkedIn Learning access.  
- R and RStudio installed (you’ll run a small code check).  

---

### 🧪 Part A — First‑time access to LinkedIn Learning (20 minutes)
Establish access to University-provided LinkedIn Learning resources.

1. Follow the UIS guidance: **help.uis.cam.ac.uk/service/support/training/linkedin-learning-info** (opens the official instructions).

![](pics/uis_linkedin.PNG){width=100% fig-alt="login to LinkedIn Learning"}

2. Choose **Login** with your University account (SSO). If prompted, connect to an existing LinkedIn profile (optional, but helpful for saving certificates).

---

### 🧪 Part B — Course Selection and Academic Alignment 

1. In LinkedIn Learning, search for **“R Programming”** or **“R for Data Analysis”**.  
2. Pick a **Beginner** course or a **Learning Path** that issues a certificate upon completion.  
3. Skim the syllabus; confirm it covers: R basics (e.g. objects, vectors), data frames, importing data, and simple plots.

::: Tip 
Short beginner certificates often take only a few hours. Pick one you can finish this week.
:::

**💭 Reflect:** a) Provide a **certificate/enrolment URL** or a screenshot proving enrolment. What challenges do you anticipate in acquiring programming skills alongside your substantive coursework? b) List three new R commands and three packages you learned and one common error you corrected.

---

### 🧪 Part C — Add to your LinkedIn profile (optional but recommended)
1. Open your LinkedIn profile → **Add profile section** → **Recommended** → **Licenses & Certifications**.  
2. **Name:** Course title. **Issuing organization:** LinkedIn Learning. **Credential URL:** paste the certificate share link (if available).  
3. Save.

---

### 🧪 Part D — RStudio tech‑check for upcoming labs
Run the following lines in RStudio to ensure you’re ready for the following Labs.

::: Tip
Recall you can run lines of code in R by hitting the keys ctrl+enter (commad+enter for Mac)
:::

```{r}
R.version.string
sessionInfo()$running
```

Install key packages (run once):
```{r, eval=FALSE}
# install all packages at once
install.packages(c("learnr", "r4ds.tutorials", "readr", "readxl", "ggplot2"))
```

Verify they load and basic plotting works:
```{r}
# Create a small data frame with x = 1,...,10 and y = sqrt(x).
# We'll use this to do a quick "tech check" with a base R plot.
df <- data.frame(x = 1:10, y = (1:10)^0.5)

# Base R line plot:
# - type = "l" draws a line (instead of points).
# - main/xlab/ylab set the title and axis labels.
# This confirms base graphics are working and shows a concave curve of sqrt(x).
plot(df$x, df$y, type = "l",
     main = "Tech check: base plot",
     xlab = "x",
     ylab = "sqrt(x)")
```

```{r}
#| warning: false

# -----------------------------------------------
# Test basic plotting capability with ggplot2
# -----------------------------------------------

# Load ggplot2 (grammar of graphics) for layered, customizable plots.
library(ggplot2)

# Create a toy dataset: yearly "average house prices" (hypothetical numbers).
# This lets us test lines, points, labels, and themes in ggplot2.
test_data <- data.frame(
  year = 2010:2020,
  house_prices = c(250000, 260000, 275000, 285000, 290000, 
                   310000, 325000, 340000, 355000, 370000, 385000)
)

# Start a ggplot:
# - aes(x = year, y = house_prices) maps variables to axes.
# - geom_line() draws the trend line; linewidth controls thickness.
# - geom_point() adds markers at each year.
# - scale_y_continuous(labels = scales::comma_format()) formats y-axis with commas (e.g., 310,000).
# - labs() sets a clear title, subtitle, axis labels, and a caption.
# - theme_minimal() gives a clean, publication-style look.
ggplot(test_data, aes(x = year, y = house_prices)) +
  geom_line(colour = "steelblue", linewidth = 1.2) +   # trend line
  geom_point(colour = "darkred", size = 2) +           # points on each year
  scale_y_continuous(labels = scales::comma_format()) +# pretty y-axis labels
  labs(
    title = "Hypothetical House Price Trends",         # main title
    subtitle = "System functionality test",            # context/subtitle
    x = "Year",                                        # x-axis label
    y = "Average House Price (£)",                     # y-axis label
    caption = "Test data for R/RStudio verification"   # caption under the plot
  ) +
  theme_minimal()                                      # clean theme
```

**💭 Reflect:** Did everything install and run without warnings? Capture any errors so we can fix them in class.

---

### Best practices

- **Practice while you watch**—replicate examples in RStudio, don’t just read the labs and watch videos.  
- Keep a **snippets** file (your personal cheat‑sheet) with commands you’ll reuse.  
- Store all artifacts (notes, PDFs) in your course project folder for quick reference.

---

🏁 *End of Lab 2*
🛑 Remember to save your script 💾

---

## 🧪 Lab 3 — Interactive R Learning: Building Programming Competency

---

### Learning outcomes

This lab exposes you to different pedagogical approaches in quantitative methods education while building the practical skills necessary for data-driven research in land economy.

By the end of this lab you will be able to:

1. Navigate **multiple R learning platforms** with different pedagogical approaches
2. Complete structured programming exercises with **immediate feedback**
3. Develop **troubleshooting skills** through guided problem-solving
4. Acquire **multiple ways of self-development** for your own study plan.

---

### Prerequisites
- R (≥ 4.1) and RStudio.
- Packages (install once):

```{r, eval=FALSE}
install.packages(c("learnr", "r4ds.tutorials", "swirl"))
```

::: Tip
If tutorials don’t appear in RStudio’s **Tutorial** tab after installation, restart R.
:::

---

### Part A — r4ds.tutorials: *01-data-visualization*
This runs as an interactive tutorial in RStudio’s **Tutorial** pane.

```{r, eval=FALSE}
# Option 1: via code
learnr::run_tutorial("01-data-visualization", package = "r4ds.tutorials")

# Option 2: discover tutorials installed on your system
learnr::available_tutorials("r4ds.tutorials")
```

**Do this:**
1. Start and complete the tutorial on data visualization. Use the *Show in New Window* icon if the pane is small.
2. When you reach the **Submit** page, follow its instructions and save the html (we won’t collect submissions in this lab, just finish to the end).

**💭 Reflect:**
- What topic would benefit from additional practice or explanation? e.g. **aesthetics** (e.g., `aes(x, y, color)`) and **geoms** (e.g., `geom_point()`, `geom_line()`)

---

### Part B — learnr: *ex-data-basics*
This is a short core tutorial bundled with **learnr**.

```{r, eval=FALSE}
# open interactive tutorial in the package 'learnr'
learnr::run_tutorial("ex-data-basics", package = "learnr")

# Explore other tutorials
learnr::run_tutorial(, package = "learnr")
```

**Do this:**
Complete all exercises for the tutorial 'ex-data-basics'..


**💭 Reflect:**
- What is the difference between a tibble and a data frame?
- Why might tibbles be preferred in modern R workflows?

---

### Part C — swirl (console‑based)
**swirl** runs entirely in the Console and saves your progress.

```{r, eval=FALSE}
# Install/run swirl
install.packages("swirl")
library(swirl)

# Start swirl
swirl()
# (enter your name when prompted)

# Install and start a course (first time only)
install_from_swirl("R Programming")   # or "R_Programming"

# At any time, leave swirl with
# bye()

# Check progress later
swirl::progress()
```

**Do this:**
- Install **R Programming** and complete the first lesson.
- Exit with `bye()` and verify progress with `swirl::progress()`.

**💭 Reflect:**
- How does working in the Console (swirl) feel compared with the GUI tutorials?

---

### Part D — Mini practice
Create a tiny vector and compute a statistic, then plot a quick line:

```{r}
# create variable x
x <- 1:10
#calculate the mean and asign it to mean_x
mean_x <- mean(x)
# review mean_x
mean_x
# quick plotting function
plot(x, type = "l", main = "Quick line", ylab = "x")
# abline adds horizontal (h) or vertical (v) lines.
abline(h = mean_x, lty = 2)
```

**💭 Reflect:**
- Which approach (r4ds.tutorials, learnr, swirl) best prepared you to learn R coding independently?

---

### Best practices
- **Use learnr/r4ds.tutorials for guided practice** with hints, auto‑checks, and saved state.
- **Use swirl** when you prefer keyboard‑only Console practice or have limited UI.
- Restart RStudio if tutorials don’t show; list what’s available with `learnr::available_tutorials()`.
- Keep your scripts open alongside tutorials to copy refined solutions into your own notes.

---

🏁 *End of Lab 3*
🛑 Remember to save your script 💾

---

## 🧪 Lab 4 — Uploading Excel & CSV Files to R (PIPR)

---

### Learning outcomes
By the end of this lab you will be able to:
1. Download the **Private rents annual inflation to August 2024** monthly workbook and save it in a tidy project structure.
2. Import **Excel** (`.xlsx/.xls`) and **CSV** files using RStudio’s **Import Dataset** UI **and** reproducible R code.
3. Deal with metadata/header rows via `skip`, set `col_names`, and verify column **types**.
4. Plot time series (index and annual % change) with base R and add reference lines.
5. Use help pages (e.g., `?plot`) and annotate charts for a policy audience.

---

### Prerequisites
- R (≥ 4.0) and RStudio.
- Project folder (e.g., `RM01_labs/`) with subfolder `data/`.
- Packages (install once):

```{r}
# Make sure to install the packages.
# install.packages(c("readxl", "readr"))
```

> **💡 Tip:** Prefer file names without spaces and lower-cases, e.g. `pipr_monthly.xls` rather than `pipr monthly.xls`.

---

### Part A — Get PIPR monthly from ONS (manual steps)
1. Go to **ONS.gov.uk** and search **Private rents annual inflation, UK countries, January 2016 to August 2024**. This lab is using ONS data on Figure 4: Rent annual inflation slowed across the UK, Private rents annual inflation, across the UK, January 2016 to August 2025.

![This is the website / data source.](/pics/pipr1.PNG)

![This is the the data we used in the tutorial.](/pics/pipr2.PNG)

2. On the dataset page, choose **Data** → **Download monthly workbook**. Save the file as **Excel** and **CSV Comma delimited**.
3. Save as `data/pipr_monthly.xls` inside your project folder (e.g., `RM01_labs/`) with subfolder `data/`.
4. (Optional) Open the file and identify the sheet that contains the **UK** and **country/regions**.

**💭 Reflect:** Why does PIPR (rents) provide a more direct lens on housing affordability and regional pressures than GDP for planning and regeneration?

---

### Part B — Import Excel via code (reproducible)
Use `readxl::read_excel()` and inspect column names to choose the UK series.

```{r}
library(readxl)
# Adjust 'sheet' and 'skip' depending on the workbook structure you download.
# we use skip = 7 because there are headings in the first 7 rows of the dataset.
pipr_raw <- read_excel("data/pipr_monthly.xls", sheet = 1, skip = 7)

# Inspect names to locate the date/month, UK Index, and UK annual % change columns
names(pipr_raw)

# A good practice is to keep a copy of the raw data and create a new version of the data for manipulation.

pipr<-pipr_raw

# rename column names for easiness. 
names(pipr) <- c("month", "uk", "england", "wales", "scotland", "n_ireland")

str(pipr)
head(pipr, 6)
```

---

### Part C — Import via RStudio UI (reference)
- Go to RStudio → **Import Dataset** → **From Excel** → select `data/pipr_monthly.xls`.

![importing from Rstudio with 'import dataset'](/pics/import1.PNG)

- Choose the relevant **sheet** and, if needed, set **Skip** for metadata rows (recall we used skip = 7 in Part B).

![Import Ecvel data window](/pics/import2.PNG)

- Set **Name** to `pipr_monthly` and verify column names (e.g., `month`, `uk_index`, `uk_yoy`).
- Click **Copy** to grab the generated R code, then **Import**.

Paste the generated code **in your R script** so your workflow is **reproducible**.



---

### Part D — Basic time‑series line plot (annual % change)
The following code plots PIPR annual % change for the UK as a line. Label the x‑axis sparsely to keep it readable.

```{r}
# Create a line plot of UK private rent annual % changes
plot(pipr$uk, type = "l",  # type = "l" means line plot
     xlab = "",  # empty x-axis label (we'll customize it below)
     ylab = "Private rents — annual % change",  # y-axis label
     main = "UK private rents (PIPR): annual % change",  # chart title
     xaxt = "n")  # suppress default x-axis (we'll add custom labels)

# Add sparse x-axis labels (every 6th data point to avoid overcrowding)
labs_every <- 6  # show a label every 6 months
at_idx <- seq(1, nrow(pipr), by = labs_every)  # create sequence of index positions
axis(1,  # 1 means x-axis (bottom)
     at = at_idx,  # positions where labels appear
     labels = pipr$month[at_idx],  # the actual month labels
     las = 2,  # rotate labels perpendicular to axis
     cex.axis = 0.7)  # make label font smaller (70% of default)

# Add subtitle showing data source directly under the title
title(sub = "Source: ONS - Index of Private Housing Rental Prices (PIPR)", 
      cex.sub = 0.8,  # 80% of normal text size
      font.sub = 3)  # 3 means italic font

# Add horizontal reference line at 2% (Bank of England inflation target)
abline(h = 2,  # horizontal line at y = 2
       lty = 2,  # line type 2 = dashed
       col = "blue")  # blue color

# Add text label for the reference line
text(x = min(pipr$month),  # position at start of time series
     y = 2,  # at the 2% level
     labels = "Inflation target (2%)",  # the text to display
     pos = 3,  # position 3 = above the point
     col = "blue",  # match the line color
     cex = 0.8)  # slightly smaller text (80% of default)
```


**💭 Reflect:** Identify periods of fastest rent inflation and periods of slowdown. What macro factors might line up with these shifts?

---

### Part E — Import PIPR as CSV (alternative)
Recall we downloaded the **CSV** version from the PIPR page. Import the file with `readr::read_csv()`.

```{r}
# Open the library to read csv comma delimited files.
library(readr)
# Create the object pipr_csv to store the data
pipr_csv <- read_csv("data/pipr_monthly.csv", skip =7)  # adjust file name
# colums/variable names
names(pipr_csv)
# quick overview of the data (tibble)
head(pipr_csv)
```

---

### Part G — Compare UK with a region
The workbook includes regions (England, Wales, Scotland, Northern Ireland), select one annual % change column and plot together with the UK.

```{r}
plot(
    pipr$uk, type = "l", lwd = 2,
    xlab = "Month", ylab = "Annual % change",
    main = "PIPR annual % change: UK vs UK countries to Aug 2025",
    ylim = c(0,12)
  )
# Use the function 'lines' to add the time series to the initial plot.
lines(pipr$england, lwd= 1, col="red")
lines(pipr$scotland, lwd= 1, col="blue")
lines(pipr$wales, lwd= 1, col="green")
lines(pipr$n_ireland, lwd= 1, col="grey")

legend(
  "topleft",
  legend = c("UK", "England", "Scotland", "Wales", "N. Ireland"),
  col    = c("black", "red", "blue", "green", "grey"),
  lwd    = c(2, 1, 1, 1, 1),
  lty    = 1,
  bty    = "n"       # no box around legend (optional)
  # inset = 0.02     # nudge inward if needed
)
```

**💭 Reflect:** Did the countries move broadly with the UK or diverge materially? What local factors could explain divergence?

---

### Part H — Help pages and plotting extras
Let's explore `?plot` in the console. This will launch a help page in the help tab. 

We also explore `curve()` and `abline()`.

```{r}
# ?plot   # open during interactive session
curve(sin(x), from = 0, to = 6.28, xlab = "x", ylab = "y = sin(x)")
abline(h = 0, v = 5, lty = 2)
```

**💭 Reflect:** Which `plot()` arguments improved readability most? Explain the use of `las`, `xaxt`, `lwd`, and `xlim`.

---

### Part I — Access the data of 'Principles of Econometrics'
You can also explore textbook datasets with **PoEdata** for practice with scatter plots and `abline(lm())`.

```{r}
#install.packages(c("remotes", "pkgbuild"))   # helper packages
#pkgbuild::has_build_tools(debug = TRUE)       # should say TRUE on Windows
#remotes::install_github("ccolonescu/PoEdata")
library(PoEdata)
data()
data("andy")
head(andy)
```

---

### Best practices
- **Reproducibility:** Prefer code over manual spreadsheet edits; paste RStudio’s generated import code into your script.
- **Paths & naming:** Use a `data/` subfolder; avoid spaces; use forward slashes.
- **Types & missing values:** Check with `str()`, `summary()`, `anyNA()`; coerce explicitly when needed.
- **Axis labelling:** Sparse, rotated labels help on monthly series.
- **Versioning:** Save dated copies of raw downloads (e.g., `pipr_monthly_2025-09-19.xlsx`).

---

🏁 *End of Lab 4*

🛑 Remember to save your script 💾

---



## 🧪 Lab 5 — Data Visualisation

*Adapted from: [A Guide to Data Visualisation in R for Beginners](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)*

---

### Learning outcomes
By the end of this lab you will be able to:

1. Explore the `state.x77` dataset in R.
2. Generate basic descriptive statistics.
3. Create simple plots using base R graphics.
4. Add labels, titles, and colours to plots.
5. Compare different chart types (scatter, bar, histogram, boxplot).
6. Use multi-panel displays to visualise multiple plots at once.

---

### Prerequisites
- R (≥ 4.0) and RStudio.
- No additional packages required beyond base R (optional: `ggplot2` for comparison).

---

### Part A — Load dataset
```{r}
library(datasets)
state_data <- as.data.frame(datasets::state.x77)
View(state_data)

```
---

### Part B — Data exploration
```{r}
str(state_data)
```
**💭 Reflect:** Explore possible research aims from the state.x77 dataset. What variables are present in `state.x77`? How many states (rows) and variables (columns) are there? Which are continuous, and which categorical (if any)?  

---

### Part C — Beginning and end of the dataset
```{r}
head(state_data, 7)
tail(state_data, 5)
```

---

### Part D — Descriptive statistics

There are several functions to obtain descriptive statistics, `summary`, `psych`, `skimr`, etc. 

Here is an example with summary.
```{r}
summary(state_data)
```

And, another example with the package `psych`.

```{r}
#| warning: false
#install.packages("psych")   # if not already installed
library(psych)

describe(state_data)
```

However, some users writing research might want more elaborated outputs.
```{r}
#| label: tbl-summary
#| message: false
#| warning: false

library(dplyr)
library(gtsummary)
library(flextable)

# Recreate data inside this chunk (Quarto runs in a clean session)
state_data <- as.data.frame(datasets::state.x77)
state_data$region <- factor(datasets::state.region)  # add stratifier
names(state_data) <- make.names(names(state_data))   # Life.Exp, HS.Grad, etc.

tbl <- state_data |>
  gtsummary::tbl_summary(
    by = region,
    type = gtsummary::all_continuous() ~ "continuous2",
    statistic = gtsummary::all_continuous() ~ c("{mean} ({sd})", "{median} [{p25}, {p75}]"),
    digits = gtsummary::all_continuous() ~ 1,
    missing = "ifany",
    label = list(
      Income ~ "Per-capita Income",
      Illiteracy ~ "Illiteracy (%)",
      Life.Exp ~ "Life Expectancy",
      Murder ~ "Murder Rate",
      HS.Grad ~ "High-School Grad (%)",
      Frost ~ "Frost Days",
      Area ~ "Area (sq mi)"
    )
  ) |>
  gtsummary::add_overall(last = TRUE) |>
  gtsummary::add_p() |>
  gtsummary::bold_labels() |>
  gtsummary::modify_caption("**Table: Descriptive statistics by region**")

tbl
```


**💭 Reflect:** Which socio-economic indicators show the widest spread?

---

### Part E — Graphics package

Review other type of graphics or plotting functions that can be useful for land economy research. The folloging code opens a new tab with more details.

```{r}
#| echo: true
#| message: true
library(help = "graphics")
```


---

### Part F — Scatterplots
```{r}
plot(state_data$Income, state_data$Illiteracy)
```

**💭 Reflect:** Do states with higher income tend to have lower illiteracy rates?

---

### Part G — Entire dataset plot
```{r}
plot(state_data)
```
**💭 Reflect:** Which pairs of socio-economic indicators appear strongly related?

---

### Part H — Points and lines
```{r}
plot(state_data$Life.Exp, type = "b")
plot(state_data$Life.Exp, type = "h")
```

**💭 Reflect:** Which representation communicates variation in life expectancy more clearly?

---

### Part J — Help
```{r}
?plot
```
**💭 Reflect:** Identify one new argument from the help page that could improve your plot.

---

### Part K — Labels and titles
```{r}
plot(state_data$Income,
     xlab = "State Index",
     ylab = "Per Capita Income",
     main = "Income levels across US states",
     col = "blue")
```
**💭 Reflect:** Do the labels improve clarity? Suggest improvements if needed.

---

### Part L — Horizontal bar plot
```{r}
# Take the Murder column as a named vector (names = state names)
m <- state_data$Murder
names(m) <- rownames(state_data)

# Pick the top 10 states by murder rate (highest first)…
m_top <- sort(m, decreasing = TRUE)[1:10]
# …then re-sort ascending so the biggest bar appears at the TOP in a horizontal plot
m_top <- sort(m_top)

# Make the plot: horizontal bars, tidy labels
bp <- barplot(
  m_top,                                # bar heights (uses names(m_top) as labels)
  horiz = TRUE,                         # horizontal bars
  las = 1,                              # horizontal axis labels
  cex.names = 0.8,                      # slightly smaller labels
  space = 0.02,                         # small gaps between bars
  col = rainbow(length(m_top)),         # one colour per bar (top 10 only)
  main = "Top 10 States by Murder Rate",
  xlab = "Murder arrests per 100,000",
  xlim = c(0, max(m_top) * 1.1)         # a bit of right padding
)
```
**💭 Reflect:** 
- Which states stand out with particularly high murder rates?
- Can you adapt the script to barplot the 10 states with lower murder rates?

---

### Part M — Vertical bar plot

We could use the previous script to `barplot` vertically by changing the option from `horiz = TRUE` to `horiz = FALSE`as in the following routine/code.
```{r}
barplot(state_data$Illiteracy,
        main = "Illiteracy Rate by State",
        xlab = "% Illiteracy",
        col = "orange",
        horiz = FALSE)
```
**💭 Reflect:** How might this plot inform discussions on educational policy?

---

### Part N — Histograms
```{r}
hist(state_data$Income,
     main = "Distribution of State Incomes",
     xlab = "Per Capita Income",
     col = "green")
```
**💭 Reflect:** Is the income distribution symmetric, skewed, or multi-modal?

---

### Part O — Boxplots
```{r}
boxplot(state_data$Life.Exp)
```
**💭 Reflect:** What does the boxplot reveal about state-level life expectancy?

---

### Part P — Multiple boxplots
```{r}
boxplot(state_data[, c("Life.Exp", "Murder", "HS.Grad", "Frost")],
        main = "Socio-economic Indicators across States")
```
**💭 Reflect:** Which variable shows the most variability? The least?

---

### Part Q — Grid of charts

We can create a grid of charts with the function `par`; (3,3) means a grid made of 3 rows x 3 columns.
```{r}
par(mfrow = c(3,3), mar = c(2,5,2,1), las = 1, bty = "n")

plot(state_data$Population)
plot(state_data$Income, state_data$Illiteracy)
plot(state_data$Life.Exp, type = "c")
plot(state_data$Life.Exp, type = "s")
plot(state_data$Life.Exp, type = "h")

barplot(state_data$Income, main = "Income levels", col = "blue", horiz = TRUE)
hist(state_data$Murder)
boxplot(state_data$HS.Grad)
boxplot(state_data[, c("Population", "Income", "Illiteracy", 
"Life.Exp")], main = "Multiple Box plots")
```

---

### Best practices
- Always check the structure of socio-economic data before plotting.
- Match plot type to variable type.
- Add descriptive titles and labels.
- Avoid misleading graphics (bar plots for continuous data should be used cautiously).
- Visualise relationships before modelling.

---

### Further visualisation packages
- **lattice**: kernel density plots
- **ggplot2**: flexible grammar of graphics
- **plotly**: interactive plots
- **maps**: plot country maps

More resources: [towardsdatascience.com article](https://towardsdatascience.com/a-guide-to-data-visualisation-in-r-for-beginners-ef6d41a34174)



---

🏁 *End of Lab 5*
🛑 Remember to save your script 💾

---



## 🧪 Lab 6 — Using GitHub Copilot in RStudio

### Goal
Learn to use GitHub Copilot inside RStudio to speed up routine coding, while staying in control of quality, privacy, and reproducibility.

---

### Learning outcomes
By the end you will be able to:

1. Enable and sign into GitHub Copilot in RStudio.
2. Accept, reject, or modify Copilot autocomplete suggestions effectively.
3. Use comment-first prompting to steer suggestions.
4. Diagnose and fix typical Copilot mistakes (wrong column names, redundant args, etc.).
5. Apply safe-use practices (privacy, determinism, avoiding “vibe coding”).

---

### Prerequisites
- R (≥ 4.3 recommended) and RStudio (a recent version with Copilot support).
- A GitHub account with Copilot access (student/educator plans are available).
- Packages: `tidyverse`, `palmerpenguins`, `readxl`, `ggplot2`.

```r
install.packages(c("tidyverse", "palmerpenguins", "readxl", "ggplot2"))
```

> Note: Column names for the `penguins` dataset may differ depending on source. Treat this as a feature to practice Copilot-aware debugging.

---

### Part A — Set up Copilot in RStudio
1. Open RStudio → Tools → Global Options → Copilot.
2. Enable GitHub Copilot and sign in with GitHub.
3. Create a new R Script (`File → New File → R Script`).
4. Type some characters to see ghost text suggestions.
   - Tab to accept, Esc to dismiss, or keep typing to ignore.

### Reflection A
Explain in one sentence the difference between ghost text and code you’ve actually inserted.

---

### Part B — First suggestions with ggplot2 (20 min)
We’ll use `penguins` to practice.

1. Add a guiding comment:
```r
# Task: scatter plot of bill length (x) vs body mass (y), colour by species
```
2. Start a plot:
```r
library(ggplot2)
# library(palmerpenguins)
# penguins <- palmerpenguins::penguins

p <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, colour = species)) +
  geom_point()
```
3. Run and, if errors occur, inspect:
```r
glimpse(penguins)
names(penguins)
```
4. Fix names if needed (`bill_length_mm` → `bill_len`).

### Mini-exercises
- Add title, caption, and axis labels:
```r
# Add a title, caption, and nicer axis labels
```
- Add smoother:
```r
# Add a loess smoother without confidence band
```

### Reflection B
When is Copilot faster? When slower?

---

### Part C — Comment-first prompting for histograms
1. Add a guiding comment:
```r
# Histogram of body mass by species, overlapping with transparency and an accessible palette
```
2. Inspect Copilot’s suggestion, remove redundant arguments, and adjust to:
```r
geom_histogram(position = "identity", alpha = 0.5)
```
3. Commit the cleaned version.

### Reflection C
Replace colour with `fill`, adjust legend, apply minimal theme.

---

### Part D — Loading local data safely
Copilot does not know your file system.

1. Save `Scooby.xlsx` in a `data/` folder.
2. Load explicitly:
```r
library(readxl)
scooby <- read_xlsx("data/Scooby.xlsx")
```
3. Add prompt:
```r
# Quick EDA: glimpse, summary, and count episodes by network
```
4. Edit Copilot’s code before running.

### Reflection D
Why be explicit with data loading and library imports?

---

### Part E — Boxplots
Visualise IMDb ratings by network.

1. Prompt:
```r
# Boxplot of IMDb (y) by network (x); tilt x labels; use fill instead of colour
```
2. Edit column names if needed.
3. Add improvements:
```r
# Make it horizontal, tidy legend, and add labs
```

### Extension E
Order networks by median rating.

---

### Part F — Best practices
- Privacy: Never expose credentials/confidential data.
- Non-determinism: Review suggestions before accepting.
- No vibe coding: Don’t accept what you don’t understand.
- Context helps: Use clean code and comments.
- Reproducibility: Remove redundant args, consider `renv`.

```r
install.packages("renv")
renv::init()
```

---

### Part G — Check-off & submission
- [ ] Copilot enabled and signed in.
- [ ] One scatter plot (corrected column names).
- [ ] One histogram (transparency + accessible palette).
- [ ] One boxplot (labels/theme improved).
- [ ] Reflection paragraph on Copilot.



---

### Troubleshooting
- Suggestions not appearing? Check Global Options → Copilot.
- Wrong dataset/columns? Run `names()`/`glimpse()`.
- Overconfident code? Scale back, test small steps.

---

### Further practice
- Rewrite prompts as comments for grouped summaries, joins, faceted plots.
- Compare Copilot vs manual solutions.

---

🏁  *End of lab 6*
🛑 Remember to save your script 💾

---