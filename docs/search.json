[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Methods for Land Economy",
    "section": "",
    "text": "Welcome\nWelcome to these interactive laboratory sessions for Research Methods in Land Economy. This digital workbook provides hands-on experience with R programming, quantitative analysis, and data visualisation techniques essential for contemporary research in land economy, finance, planning, and environmental housing studies.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Research Methods for Land Economy Topics</span>"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Research Methods for Land Economy",
    "section": "",
    "text": "Supervisions Overview\nThese supervised laboratory sessions are designed for MPhil students beginning their quantitative research journey. Over several progressive supervision, you will develop from complete programming novice to confident data analysis skills, working with appropriate real-world land economy datasets from institutional sources and applying cutting-edge analytical techniques to substantive research questions in your field.\n\nAcademic Integration\nEach lab connects technical skill development with substantive research applications, ensuring that programming competency serves your broader academic and professional objectives. You’ll work with datasets relevant to housing policy, regional development, and planning analysis while developing reproducible research workflows used in leading academic institutions and policy organisations.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Research Methods for Land Economy Topics</span>"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-interactive-workbook",
    "href": "index.html#how-to-use-this-interactive-workbook",
    "title": "Research Methods for Land Economy",
    "section": "How to Use This Interactive Workbook",
    "text": "How to Use This Interactive Workbook\nThis workbook is designed as a practical, hands-on learning experience that requires active engagement with both the content and your RStudio environment. Success depends on following the structured approach outlined below.\n\nEssential Setup\n\nTechnical Requirements\nBefore beginning, ensure you have: - R (version ≥ 4.3) installed from r-project.org - RStudio Desktop (latest version) from posit.co - A stable internet connection for package installation and data downloads - Sufficient disk space (≥ 2GB) for datasets and outputs\n\n\n💾 Install R and RStudio on your laptops/gadgets\nRStudio is a wrapper for R; we are using RStudio because it makes looks R more organised and straightforward. Follow the following instructions:\n\ngo to https://www.r-project.org\nclick on ‘CRAN mirror’\nchoose one of the two UK mirrors - https://www.stats.bris.ac.uk/R/ or https://cran.ma.imperial.ac.uk/\nClick on ‘Download R for Windows’ or ‘Download R for macOS’\nClick on ’install R for the first time\nClick on ‘Download R-… for Windows’, the current version is R-4.5.1. Or alternatively, download the executable file for macOS.\ndouble-click the downloaded file, then click on ‘Run’, ‘language:English’, ‘OK’, and read and follow the instructions of installation until you click on ‘Next’ for installing and ‘Finish’\n\nThen proceed to Installing RStudio.\n\nGo to rstudio.com\nclick on ‘download’\ndownload the Free version, download RStudio for Windows or macOS\nClick on ‘Next’ if you agree and on ‘Install’ and ‘Finish’ to complete the process.\n\n\n\nProject Organisation\nCreate a dedicated folder structure for the course:\nRM01_Labs/\n├── data/           # Raw datasets and imports\n├── scripts/        # Your R code files  \n├── outputs/        # Generated plots, tables, reports\n├── certificates/   # Professional development documentation\n└── reflections/    # Written responses to critical questions\n\n\n\nActive Learning Protocol\n\n1. Read → Code → Reflect\nEach lab section follows this essential pattern: - Read the contextual material and instructions carefully - Code by replicating all examples in your RStudio session - Reflect by answering critical thinking questions in writing\n\n\n2. Hands-On Replication\nCritical: Do not simply read the code examples. You must: - Type (don’t copy-paste) all code into RStudio scripts - Execute each code block and verify the outputs - Experiment with variations and modifications - Debug any errors before proceeding\n\n\n3. Documentation Standards\nMaintain professional documentation practices: - Save each lab as a separate R script (e.g., lab01_certification.R) - Comment your code extensively using # explanatory text - Include session information - Date and version your files systematically\n\n\n\nDeliverables\nEach lab includes specific deliverables: - Technical: Working R scripts with documented code - Visual: Publication-quality plots and analytical outputs\n- Written: Responses to all critical reflection questions - Professional: Certificates, portfolios, and documentation\n\n\nLearning Support\n\nGetting Help\nWhen you encounter difficulties: 1. Review the relevant section carefully for missed details or typos 2. Check R documentation using ?function_name or help(function_name) 3. Examine error messages systematically—they often provide clear guidance and AI can often provide answers 4. Consult peers through appropriate academic channels 5. Attend supervision sessions prepared with specific questions\n\n\nCommon Pitfalls to Avoid\n\nPassive learning: You must complete the materials before attending the face-to-face supervisions.\nPassive reading: You must actively code to learn programming\nCopy-paste coding: Type examples yourself to build muscle memory\nIgnoring errors: Always resolve issues before proceeding\nSuperficial reflections: Engage deeply with methodological questions\nPoor organisation: Maintain systematic file and folder structures\n\n\n\nIndustry Applications\nR programming competency is increasingly valued in: - Policy Analysis: Government departments and think tanks - Consultancy: Urban planning, housing, and development firms - Research Organisations: Academic institutions and policy institutes - Data Science: Emerging opportunities across multiple sectors",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Research Methods for Land Economy Topics</span>"
    ]
  },
  {
    "objectID": "index.html#technical-notes",
    "href": "index.html#technical-notes",
    "title": "Research Methods for Land Economy",
    "section": "Technical Notes",
    "text": "Technical Notes\nLabs will introduce packages progressively. Install required packages as indicated in each session, and maintain a record of your technical environment using:\n# Document your session for reproducibility\nsessionInfo()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Research Methods for Land Economy Topics</span>"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Research Methods for Land Economy",
    "section": "Getting Started",
    "text": "Getting Started\nNavigate to Supervision 1 using the link to begin your journey into R programming for land economy research. Remember: this is an interactive learning experience that requires preparation before attending supervisions, your active participation, critical thinking, and professional engagement.\nSuccess in these labs depends not just on following instructions, but on developing the analytical thinking skills that will serve your research skills.\n\nFor technical support or academic guidance, consult your teaching team or attend designated office hours with specific questions prepared.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Research Methods for Land Economy Topics</span>"
    ]
  },
  {
    "objectID": "supervision_1.html",
    "href": "supervision_1.html",
    "title": "Supervision 1",
    "section": "",
    "text": "Lab 1 — R Quickstart",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-1-r-quickstart",
    "href": "supervision_1.html#lab-1-r-quickstart",
    "title": "Supervision 1",
    "section": "",
    "text": "🎯 Learning outcomes (you will be able to)\n\nOpen RStudio and recognise the Console, Script, Environment/History, Files/Plots/Help panes.\nCreate and run a short R script (comments, simple operations).\nSet your working directory to a course folder.\nCreate and inspect basic objects (a scalar and a small matrix).\nSave your script for the next supervision.\n\n\n\n🧰 Prerequisites\n\nR and RStudio installed.\nA course folder on your machine where you will save scripts.\n\nRM01_Labs/\n├── data/           # Raw datasets and imports\n├── scripts/        # Your R code files  \n├── outputs/        # Generated plots, tables, reports\n├── certificates/   # Professional development documentation\n└── reflections/    # Written responses to critical questions\n\n\n📘 Introduction to R\nAfter downloading and installing open RStudio, we will cover now some tutorials.\n👨‍💻 Long Tutorial\nWe would cover a brief introduction on this labs, students would like to cover a longer tutorial to get use to R quickly. Click on this link: https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\n\n\nA. Get oriented in RStudio (2–3 min)\nYou need to have installed R and RStudio to continue with this lab.\n\nOpen Rstudio in your computer.\n\n\n\n\nOn this picture, there are three panels ‘the Console’, ‘The Environment’, and ‘The Plots, Help and Files’ panel.\n\n\n\nLet’s choose a better appeareance for our RStudio.\n\n\n\n\nIn RStudio, click on ‘Tools’ and ‘Global Options’\n\n\n\nAfterwards, in the window “Options”, click on “Appearance”, RStudio theme: “Modern”, Editor font: “Courier”, Editor theme: Cobalt. Finally, click on “Apply”\n\n\n\n\nYou are here by clicking on Tools&gt;Global Options..&gt;Appereance&gt;Modern&gt;Courier&gt;Cobalt&gt;Apply\n\n\n\n\n\nB. Your first script (3–5 min)\n\nOpen a file to save the code for this session. Click on File → New File → R Script; or simply press Ctrl+Shift+N (command+shift+enter in Mac); this will open a new panel called ‘Script’ where we are going to write the commands for R. Change the name of the script, saving the script in the folder RM01_Labs/scripts/.\n\n\n\n\nClick on File&gt;New File&gt;R Script\n\n\n\nAdd a comment (starts with #.) On the script panel, type the caracter # and then write 'LAB ONE AND TODAY'S DATE'. R will ignore any line of command starting with #. You can use # to add comments, titles, reminders within your R code/ R Script.\n\n\n\n\nComments are crucial to learn R\n\n\nYour R Script shall look like this:\n\n\n\nComments are crucial to learn R\n\n\nThe Rstudio screen has four windows or panels: 1. Console. 2. Environment and history. 3. Files, plots, packages and help. 4. The R script(s) and data view. The R script is where you keep a record of your work or commands - in a line by line basis.\n\nOn your script, type getwd() in line number ‘2’ and hit the keys ‘ctrl+enter’ in your keyboard (The + indicates ‘do it at the same time’), you dont need to press the key ‘+’. After ‘running’ line 2, you will see in the console panel the working directory (or folder) that R is using to download and upload files.\n\n\n\n\nThis image shows how your R Script should look and the outcome in the console -bottom panel after getwd()\n\n\n\n\n\nC. Set your working directory (3–4 min)\nChoose your course file folder 📁. Recall we called the working folder folder ‘RM01_Labs’. Afterwards, in RStudio’ go to ‘Session’, ‘Set Working Directory’, ‘Choose Directory’, and select this folder.\n\n\n\nCreate your folder and then click on Session&gt;Set Working Directory&gt;Choose Directory\n\n\nThe ‘Console’ panel renders setwd(and a path/directory to your chosen folder in your computer).\n\nCopy and paste this output in line 3 in your R code. This will save you time as you will only need to run line 3 (ctrl+enter) to set the directory or folder where you are going to work in R.\n\n\n\n\nThis is the code you shall copy and paste in your R Script, ignore ‘&gt;’\n\n\n\n\n\nsetwd() example in your R Script\n\n\n\n\nD. First calculations & a matrix (3–4 min)\n\nIn your script, run: 5 * 5 (result should be 25 in the Console).\nCreate a small matrix and run it:\n5*5\nA &lt;- matrix(1:8, nrow = 4, ncol = 2)\nA\n\n\n\n\nA multiplication and your first matrix\n\n\nThe outcome in the console shall be as follows:\n\n\n\nMultiplication and matrix output in your Console\n\n\n\nIn the line 5, you asked R to create a matrix called ‘A’, with numbers from 1 to 8, with four rows and two columns.\n\n\n\n\nE. Inspect objects & view data (2–3 min)\n\nCheck the Environment tab to see objects you’ve created.\nThe tab History shows a list of commands used do far.\n\n\n\n\nEnvironment Panel\n\n\n\nTo see the matrix A in a new window, type the command View(A) in line 7 and hit the keys ‘ctrl+enter’ to run line 7, this will send you to a different tab. Afterwards, click on your R script tab.\n\n\n\n\nSample of function View()\n\n\n\n\nF. (Optional) Install and load a package (2–3 min)\nThe tab ‘Packages’ shows the list of add-ons included in the installation of RStudio. If checked, the package is loaded into R, if not, any command related to that package won’t work, you will need select it. You can also install other add-ons by clicking on the ‘Install Packages’ icon.\nAnother way to install add-ons is to type the function install.packages(\"name of the package\"), and then you will be able to open the library of commands of that package.\n\nIn line 8, to install the package forecast, type install.packages(“forecast”) and hit ctrl+enter. If a window opens, you can hit yes to restart RStudio. See the picture below, make sure you do not get errors in the console. The sign ‘&gt;’ will show when R finishes running a line.\n\n\n\n\nFunction install.packages() and installing package ‘forecast’\n\n\nYou must activate the package by typing ‘library(the package)’, for example, library(forecast) and ctrl+enter. This will activate all functions within the ‘forecast’ package.\nlibrary(forecast)\n\n\n\nlibrary() function and sample with package ‘forecast’\n\n\n\n\n\nThe Console will show this result after ‘running’ library(“forecast”)\n\n\nThe package forecast is activated to analyse and predict time series (e.g. yearly house prices during the last 20 years).\nScript/Data View Window:\n• Begin scripts with a comment for title and description using the hash character (#). Anything after the hash on the same line is considered a comment and is ignored by R. • Code can continue to the next line without a special character, but only if the previous line ends in a way that suggests continuation (e.g., a comma or unclosed brackets). • To run a line of code, position the cursor on the line and press Ctrl+Enter. For multiple lines, select them and press Ctrl+Enter.\nConsole/Output Window:\n• It’s recommended to work in script mode for reusability. • Commands outside the script context can be typed at the bottom of the console, indicated by the “&gt;” sign. • Press Enter to execute a command. • Use the up and down arrows to revisit and edit older lines of code previously typed into the console.\n\n\n\n💾 Save your script (1 min)\nFile → Save (e.g., lab1_quickstart.R) into your course folder. \n\n\n✅ Check‑off\n\nI can run code from a script (Ctrl+Enter).\nMy working directory is set via setwd() at the top of the script.\nI created A &lt;- matrix(1:8, 4, 2) and can see it in Environment.\nScript saved.\n\nEnd of Lab 1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-2-professional-development-r-certification-via-linkedin-learning",
    "href": "supervision_1.html#lab-2-professional-development-r-certification-via-linkedin-learning",
    "title": "Supervision 1",
    "section": "Lab 2 — Professional Development: R Certification via LinkedIn Learning",
    "text": "Lab 2 — Professional Development: R Certification via LinkedIn Learning\nProfessional certifications complement academic learning by providing industry-recognised credentials. For land economy graduates leading industries and entering consultancy, government, or research roles, demonstrating quantitative competency through multiple channels strengthens your professional profile and evidences commitment to continuous learning.\n\n\nLearning outcomes\nBy the end of this lab you will be able to:\n\nAccess institutional resources / LinkedIn Learning for continuous professional development\nComplete a certified R programming course that demonstrates foundational competency\nDocument your learning through professional certification pathways\nPrepare your technical environment for advanced coursework\nReflect critically on skill acquisition in academic and professional contexts\n\n\n\n\nPrerequisites\n\nUniversity credentials for LinkedIn Learning access.\n\nR and RStudio installed (you’ll run a small code check).\n\n\n\n\n🧪 Part A — First‑time access to LinkedIn Learning (20 minutes)\nEstablish access to University-provided LinkedIn Learning resources.\n\nFollow the UIS guidance: help.uis.cam.ac.uk/service/support/training/linkedin-learning-info (opens the official instructions).\n\n\n\nChoose Login with your University account (SSO). If prompted, connect to an existing LinkedIn profile (optional, but helpful for saving certificates).\n\n💭 Reflect: Write bulletpoints that cover:\n\nRole alignment. Name two job roles relevant to Land Economy and state one task per role that this R certificate prepares you for.\nEvidence & signalling. How will you showcase the skill?\nWhat are the next steps (4–6 weeks). A mini-pathway after this certificate, e.g.:\n\nR basics → 2) data wrangling/visualisation → 3) simple econometrics for policy/housing → 4) spatial basics (e.g., shapefiles) → 5) mini-project relevant to Land Economy.\n\n\n\n\n\n🧪 Part B — Course Selection and Academic Alignment (30 minutes)\n\nIn LinkedIn Learning, search for “R Programming” or “R for Data Analysis”.\n\nPick a Beginner course or a Learning Path that issues a certificate upon completion.\n\nSkim the syllabus; confirm it covers: R basics (e.g. objects, vectors), data frames, importing data, and simple plots.\n\n\nShort beginner certificates often take only a few hours. Pick one you can finish this week.\n\n💭 Reflect: a) Provide a certificate/enrolment URL or a screenshot proving enrolment. What challenges do you anticipate in acquiring programming skills alongside your substantive coursework? b) List three new R commands and three packages you learned and one common error you corrected.\n\n\n\n🧪 Part C — Add to your LinkedIn profile (optional but recommended)\n\nOpen your LinkedIn profile → Add profile section → Recommended → Licenses & Certifications.\n\nName: Course title. Issuing organization: LinkedIn Learning. Credential URL: paste the certificate share link (if available).\n\nSave.\n\n\n\n\n🧪 Part D — RStudio tech‑check for upcoming labs\nRun the following lines in RStudio to ensure you’re ready for the following Labs.\n\nRecall you can run lines of code in R by hitting the keys ctrl+enter (commad+enter for Mac)\n\n\nR.version.string\n\n[1] \"R version 4.4.2 (2024-10-31 ucrt)\"\n\nsessionInfo()$running\n\n[1] \"Windows 10 x64 (build 19045)\"\n\n\nInstall key packages (run once):\n\ninstall.packages(c(\"learnr\", \"r4ds.tutorials\", \"readr\", \"readxl\", \"ggplot2\"))\n\nVerify they load and basic plotting works:\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\ndf &lt;- data.frame(x = 1:10, y = (1:10)^0.5)\nplot(df$x, df$y, type = \"l\", main = \"Tech check: base plot\", xlab = \"x\", ylab = \"sqrt(x)\")\n\n\n\n\n\n\n\n\n\n# Test basic plotting capability\nlibrary(ggplot2)\ntest_data &lt;- data.frame(\n  year = 2010:2020,\n  house_prices = c(250000, 260000, 275000, 285000, 290000, \n                   310000, 325000, 340000, 355000, 370000, 385000)\n)\n\nggplot(test_data, aes(x = year, y = house_prices)) +\n  geom_line(colour = \"steelblue\", linewidth = 1.2) +\n  geom_point(colour = \"darkred\", size = 2) +\n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(\n    title = \"Hypothetical House Price Trends\",\n    subtitle = \"System functionality test\",\n    x = \"Year\",\n    y = \"Average House Price (£)\",\n    caption = \"Test data for R/RStudio verification\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n💭 Reflect: Did everything install and run without warnings? Capture any errors so we can fix them in class.\n\n\n\nBest practices\n\nPractice while you watch—replicate examples in RStudio, don’t just read the labs and watch videos.\n\nKeep a snippets file (your personal cheat‑sheet) with commands you’ll reuse.\n\nStore all artifacts (notes, PDFs) in your course project folder for quick reference.\n\n\nEnd of Lab 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-3-interactive-r-learning-building-programming-competency",
    "href": "supervision_1.html#lab-3-interactive-r-learning-building-programming-competency",
    "title": "Supervision 1",
    "section": "Lab 3 — Interactive R Learning: Building Programming Competency",
    "text": "Lab 3 — Interactive R Learning: Building Programming Competency\n\n\nLearning outcomes\nThis lab exposes you to different pedagogical approaches in quantitative methods education while building the practical skills necessary for data-driven research in land economy.\nBy the end of this lab you will be able to:\n\nNavigate multiple R learning platforms with different pedagogical approaches\nComplete structured programming exercises with immediate feedback\nDevelop troubleshooting skills through guided problem-solving\nAcquire multiple ways of self-development for your own study plan.\n\n\n\n\nPrerequisites\n\nR (≥ 4.1) and RStudio.\nPackages (install once):\n\n\ninstall.packages(c(\"learnr\", \"r4ds.tutorials\", \"swirl\"))\n\n\nIf tutorials don’t appear in RStudio’s Tutorial tab after installation, restart R.\n\n\n\n\n🧪 Part A — r4ds.tutorials: 01-data-visualization\nThis runs as an interactive tutorial in RStudio’s Tutorial pane.\n\n# Option 1: via code\nlearnr::run_tutorial(\"01-data-visualization\", package = \"r4ds.tutorials\")\n\n# Option 2: discover tutorials installed on your system\nlearnr::available_tutorials(\"r4ds.tutorials\")\n\nDo this: 1. Start and complete the tutorial. Use the Show in New Window icon if the pane is small. 2. When you reach the Submit page, follow its instructions (we won’t collect submissions in this lab, just finish to the end).\n💭 Reflect: - What’s the difference between aesthetics (e.g., aes(x, y, color)) and geoms (e.g., geom_point(), geom_line())? - Name two plot improvements you used (labels, theme, scales, facets).\n\n\n\n🧪 Part B — learnr: ex-data-basics\nThis is a short core tutorial bundled with learnr.\n\nlearnr::run_tutorial(\"ex-data-basics\", package = \"learnr\")\n\nDo this: 1. Complete all exercises; click Run and Submit Answer for each. 2. If you get stuck, open the Hint dropdowns.\n💭 Reflect: - Which data types/structures did you manipulate (vectors, data frames)? - One mistake you made and how the tutorial feedback helped you fix it.\n\n\n\n🧪 Part C — swirl (console‑based)\nswirl runs entirely in the Console and saves your progress.\n\n# Install/run swirl\ninstall.packages(\"swirl\")\nlibrary(swirl)\n\n# Start swirl\nswirl()\n# (enter your name when prompted)\n\n# Install and start a course (first time only)\ninstall_from_swirl(\"R Programming\")   # or \"R_Programming\"\n\n# At any time, leave swirl with\n# bye()\n\n# Check progress later\nswirl::progress()\n\nDo this: - Install R Programming and complete the first lesson. - Exit with bye() and verify progress with swirl::progress().\n💭 Reflect: - How does working in the Console (swirl) feel compared with the GUI tutorials? - Which mode gave you clearer feedback on wrong answers?\n\n\n\n🧪 Part D — Mini practice (5–10 min)\nCreate a tiny vector and compute a statistic, then plot a quick line:\n\nx &lt;- 1:10\nmean_x &lt;- mean(x)\nmean_x\n\n[1] 5.5\n\nplot(x, type = \"l\", main = \"Quick line\", ylab = \"x\")\nabline(h = mean_x, lty = 2)\n\n\n\n\n\n\n\n\n💭 Reflect: - Which approach (r4ds.tutorials, learnr, swirl) best prepared you to write and run this code independently?\n\n\n\nBest practices\n\nUse learnr/r4ds.tutorials for guided practice with hints, auto‑checks, and saved state.\nUse swirl when you prefer keyboard‑only Console practice or have limited UI.\nRestart RStudio if tutorials don’t show; list what’s available with learnr::available_tutorials().\nKeep your scripts open alongside tutorials to copy refined solutions into your own notes.\n\n\n\n\nSuggested Answers (indicative)\n\nPart A: Aesthetics map data → visual channels; geoms are the drawing layers (points, lines, bars). Improvements often include labs(), scale_*_continuous(), theme_minimal(), and facet_wrap().\nPart B: Worked with vectors/data frames; common mistakes include mixing types (character vs numeric) or forgetting &lt;-. Hints/feedback indicate expected objects or function names.\nPart C: Console is lightweight but less visual; learnr/r4ds tutorials give more structured feedback. Swirl progress persists via swirl::progress(); exit with bye().\nPart D: Any of the three can help; most students report faster iteration in learnr/r4ds due to inline errors/hints.\n\n\nEnd of Lab 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-4-uploading-excel-csv-files-to-r-pipr",
    "href": "supervision_1.html#lab-4-uploading-excel-csv-files-to-r-pipr",
    "title": "Supervision 1",
    "section": "Lab 4 — Uploading Excel & CSV Files to R (PIPR)",
    "text": "Lab 4 — Uploading Excel & CSV Files to R (PIPR)\n\n\nLearning outcomes\nBy the end of this lab you will be able to: 1. Download the ONS Price Index of Private Rents (PIPR) monthly workbook and save it in a tidy project structure. 2. Import Excel (.xlsx/.xls) and CSV files using RStudio’s Import Dataset UI and reproducible R code. 3. Deal with metadata/header rows via skip, set col_names, and verify column types. 4. Plot time series (index and annual % change) with base R and add reference lines. 5. Use help pages (e.g., ?plot) and annotate charts for a policy audience.\n\n\n\nPrerequisites\n\nR (≥ 4.0) and RStudio.\nProject folder (e.g., Rcoding/) with subfolder data/.\nPackages (install once):\n\n\n# install.packages(c(\"readxl\", \"readr\"))\n\n\n💡 Tip: Prefer file names without spaces and lower-cases, e.g. pipr_monthly.xls rather than pipr monthly.xls.\n\n\n\n\n🧪 Part A — Get PIPR monthly from ONS (manual steps)\n\nGo to ONS.gov.uk and search Price Index of Private Rents (PIPR). This lab is using ONS data on Figure 4: Rent annual inflation slowed across the UK, Private rents annual inflation, across the UK, January 2016 to August 2025.\nOn the dataset page, choose Data → Download monthly workbook (Excel) or CSV if available.\nSave as data/pipr_monthly.xls inside your project folder (e.g., Rcoding/) with subfolder data/.\n(Optional) Open the file and identify the sheet that contains the UK and country/regions.\n\n💭 Reflect: Why does PIPR (rents) provide a more direct lens on housing affordability and regional pressures than GDP for planning and regeneration?\n\n\n\n🧪 Part B — Import Excel via code (reproducible)\nUse readxl::read_excel() and inspect column names to choose the UK series.\n\nlibrary(readxl)\n# Adjust 'sheet' and 'skip' depending on the workbook structure you download.\n# we use skip = 7 because there are headings in the first 7 rows of the dataset.\npipr_raw &lt;- read_excel(\"data/pipr_monthly.xls\", sheet = 1, skip = 7)\n\n# Inspect names to locate the date/month, UK Index, and UK annual % change columns\nnames(pipr_raw)\n\n[1] \"Date\"             \"UK\"               \"England\"          \"Wales\"           \n[5] \"Scotland\"         \"Northern Ireland\"\n\n# let's keep a copy of the raw data intact and create a new version of the data.\n\npipr&lt;-pipr_raw\n\n# rename column names for easiness. \nnames(pipr) &lt;- c(\"month\", \"uk\", \"england\", \"wales\", \"scotland\", \"n_ireland\")\n\nstr(pipr)\n\ntibble [116 × 6] (S3: tbl_df/tbl/data.frame)\n $ month    : POSIXct[1:116], format: \"2016-01-01\" \"2016-02-01\" ...\n $ uk       : num [1:116] 3.3 3.3 3.4 3.3 3.2 3.3 3.4 3.3 3.2 3.3 ...\n $ england  : num [1:116] 3.5 3.5 3.6 3.5 3.3 3.5 3.7 3.6 3.5 3.6 ...\n $ wales    : num [1:116] 1.2 0.8 0.8 0.6 0.4 0.3 0.3 0.9 1.4 1.3 ...\n $ scotland : num [1:116] 2.1 1.8 1.6 1.5 1.4 1.1 1.2 0.9 1.1 1.1 ...\n $ n_ireland: num [1:116] 1.1 1.3 1.4 1.6 1.6 1.6 1.5 1.5 1 0.9 ...\n\nhead(pipr, 6)\n\n# A tibble: 6 × 6\n  month                  uk england wales scotland n_ireland\n  &lt;dttm&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 2016-01-01 00:00:00   3.3     3.5   1.2      2.1       1.1\n2 2016-02-01 00:00:00   3.3     3.5   0.8      1.8       1.3\n3 2016-03-01 00:00:00   3.4     3.6   0.8      1.6       1.4\n4 2016-04-01 00:00:00   3.3     3.5   0.6      1.5       1.6\n5 2016-05-01 00:00:00   3.2     3.3   0.4      1.4       1.6\n6 2016-06-01 00:00:00   3.3     3.5   0.3      1.1       1.6\n\n\n💭 Reflect: Are the three selected columns correct for your workbook version? If not, which names should you use instead?\n\n\n\n🧪 Part C — Import via RStudio UI (reference)\n\nRStudio → Import Dataset → From Excel → select data/pipr_monthly.xls.\nChoose the relevant sheet and, if needed, set Skip for metadata rows.\nSet Name to pipr and verify column names (e.g., month, uk_index, uk_yoy).\nClick Copy to grab the generated R code, then Import.\n\n\nPaste the generated code in your script so your workflow is reproducible.\n\n\n\n\n🧪 Part D — Basic time‑series line plot (annual % change)\nPlot PIPR annual % change for the UK as a line. Label the x‑axis sparsely to keep it readable.\n\nplot(pipr$uk, type = \"l\",\n     xlab = \"\",\n     ylab = \"Private rents — annual % change\",\n     main = \"UK private rents (PIPR): annual % change\",\n     xaxt = \"n\")   # suppress default axis)\n\n# Add sparse x-axis labels\nlabs_every &lt;- 6\nat_idx &lt;- seq(1, nrow(pipr), by = labs_every)\naxis(1, at = at_idx, labels = pipr$month[at_idx],\n     las = 2, cex.axis = 0.7)  # smaller font for ticks\n\n# Add subtitle (source) directly under the title\ntitle(sub = \"Source: ONS - Index of Private Housing Rental Prices (PIPR)\", \n      cex.sub = 0.8, font.sub = 3)  # italic, smaller\n# Reference line at 2% (inflation target)\nabline(h = 2, lty = 2, col = \"blue\")\n\n# Label it\ntext(x = min(pipr$month), y = 2, labels = \"Inflation target (2%)\",\n     pos = 3, col = \"blue\", cex = 0.8)\n\n\n\n\n\n\n\n\n💭 Reflect: Identify periods of fastest rent inflation and periods of slowdown. What policy or macro factors might line up with these shifts?\n\n\n\n🧪 Part E — Blue reference line at 2% (Inflation Target) & customise\n💭 Reflect: What extra annotations (e.g., policy changes, shocks) would make this plot more useful to a local authority audience?\n\n\n\n🧪 Part F — Import PIPR as CSV (alternative)\nOption 1: Download the CSV from the PIPR page (if provided) and import with readr::read_csv().\n\nlibrary(readr)\npipr_csv &lt;- read_csv(\"data/pipr_monthly.csv\")  # adjust file name\n\nNew names:\nRows: 130 Columns: 9\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(6): Figure 4: Rent annual inflation slowed across the UK, ...2, ...3, .... lgl\n(3): ...7, ...8, ...9\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n• `` -&gt; `...6`\n• `` -&gt; `...7`\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n\nnames(pipr_csv)\n\n[1] \"Figure 4: Rent annual inflation slowed across the UK\"\n[2] \"...2\"                                                \n[3] \"...3\"                                                \n[4] \"...4\"                                                \n[5] \"...5\"                                                \n[6] \"...6\"                                                \n[7] \"...7\"                                                \n[8] \"...8\"                                                \n[9] \"...9\"                                                \n\nhead(pipr_csv)\n\n# A tibble: 6 × 9\n  Figure 4: Rent annual inflat…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9 \n  &lt;chr&gt;                          &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 Private rents annual inflatio…  &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n2 &lt;NA&gt;                            &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n3 Notes                          \"1. … &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n4 Unit                           \"Per… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n5 Source                         \"Pri… &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n6 &lt;NA&gt;                            &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NA    NA    NA   \n# ℹ abbreviated name: ¹​`Figure 4: Rent annual inflation slowed across the UK`\n\n\nOption 2: If a CSV isn’t provided, save the relevant sheet as CSV from Excel and import it.\n\n# Example: write out the subset you prepared, then re-import it\n# write_csv(pipr, \"data/pipr_monthly_subset.csv\")\npipr_from_csv &lt;- read_csv(\"data/pipr_monthly.csv\")\n\nNew names:\nRows: 130 Columns: 9\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(6): Figure 4: Rent annual inflation slowed across the UK, ...2, ...3, .... lgl\n(3): ...7, ...8, ...9\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n• `` -&gt; `...6`\n• `` -&gt; `...7`\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n\n\n💭 Reflect: Are types preserved across Excel vs CSV imports? Which route is more reliable/reproducible on your machine?\n\n\n\n🧪 Part G — Compare UK with a region (optional)\nIf your workbook includes regions (England, Wales, Scotland, Northern Ireland), select one annual % change column and plot together with the UK.\n\n# Attempt to find a regional YoY column (edit the pattern or use exact name after checking names())\nreg_yoy_col &lt;- grep(\"England.*Annual|Annual.*England|England.*%\", names(pipr_raw), ignore.case = TRUE)[1]\n\nif(!is.na(reg_yoy_col)){\n  reg_yoy &lt;- suppressWarnings(as.numeric(pipr_raw[[reg_yoy_col]]))\n  plot(pipr$uk_yoy, type = \"l\", xlab = \"Month\", ylab = \"Annual % change\",\n       main = \"PIPR annual % change: UK vs England\")\n  lines(reg_yoy, lty = 3)\n  legend(\"topleft\", legend = c(\"UK\", \"England\"), lty = c(1,3), bty = \"n\")\n} else {\n  message(\"No matching regional column automatically detected — inspect names() and set reg_yoy_col manually.\")\n}\n\nNo matching regional column automatically detected — inspect names() and set reg_yoy_col manually.\n\n\n💭 Reflect: Does the region move broadly with the UK or diverge materially? What local factors could explain divergence?\n\n\n\n🧪 Part H — Help pages and plotting extras\nExplore ?plot, curve(), and abline().\n\n# ?plot   # open during interactive session\ncurve(sin(x), from = 0, to = 6.28, xlab = \"x\", ylab = \"y = sin(x)\")\n\n\n\n\n\n\n\nplot(1:10, type = \"n\", xlab = \"x\", ylab = \"y\")\nabline(h = 0, v = 5, lty = 2)\n\n\n\n\n\n\n\n\n💭 Reflect: Which plot() arguments improved readability most (e.g., las, xaxt, lwd, xlim)?\n\n\n\n🧪 Part I — (Optional) Principles of Econometrics data\nYou can also explore textbook datasets with PoEdata for practice with scatter plots and abline(lm()).\n\n#install.packages(c(\"remotes\", \"pkgbuild\"))   # helper packages\n#pkgbuild::has_build_tools(debug = TRUE)       # should say TRUE on Windows\n#remotes::install_github(\"ccolonescu/PoEdata\")\nlibrary(PoEdata)\n\ndata(\"andy\")\nhead(andy)\n\n  sales price advert\n1  73.2  5.69    1.3\n2  71.8  6.49    2.9\n3  62.4  5.63    0.8\n4  67.4  6.22    0.7\n5  89.3  5.02    1.5\n6  70.3  6.41    1.3\n\n\n💭 Reflect: Which numeric pairs in andy would make a sensible policy-relevant scatter (e.g., income vs expenditure)?\n\n\n\nBest practices\n\nReproducibility: Prefer code over manual spreadsheet edits; paste RStudio’s generated import code into your script.\nPaths & naming: Use a data/ subfolder; avoid spaces; use forward slashes.\nTypes & missing values: Check with str(), summary(), anyNA(); coerce explicitly when needed.\nAxis labelling: Sparse, rotated labels help on monthly series.\nVersioning: Save dated copies of raw downloads (e.g., pipr_monthly_2025-09-19.xlsx).\n\n\n\n\nFurther resources\n\nONS Price Index of Private Rents (PIPR) — monthly\nR help: ?read_excel, ?read_csv, ?plot, ?abline, ?curve\nR Data Import/Export manual\n\n\n\n\nSuggested Answers to Reflection Questions\n\nIndicative answers; specifics depend on your workbook version and the columns you select.\n\nPart A — PIPR directly tracks private rents, aligning with housing affordability, regional pressures, and regeneration aims; GDP is broader and less targeted.\nPart B — Correct columns usually include a date/month field plus UK Index and UK annual % change. Adjust sheet/skip and pick exact names after inspecting names().\nPart C — Pasting the generated code ensures others (and future you) can reproduce the import without the UI.\nPart D — Rent inflation tends to cluster in waves; periods of rapid increases are visible as peaks, slowdowns as troughs. Index-by-month labelling clarifies timing.\nPart E — Add a zero line; annotate notable policy changes or shocks; consider shading for periods of sustained acceleration.\nPart F — CSV imports avoid Excel formatting quirks but require careful type checks. Both routes can be reproducible if code-driven.\nPart G — Regions often co-move with the UK but can diverge due to local supply constraints, policy differences, or demand shocks.\nPart H — Useful plot() args: las (label orientation), xaxt/yaxt (axis toggles), lwd (line width), xlab/ylab (clear labels), xlim/ylim (focus range).\nPart I — Any sensible numeric pair (e.g., household income vs spending) supports regression line illustrations with abline(lm(y ~ x, data = andy)).\n\nEnd of Lab 4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-5-data-visualisation",
    "href": "supervision_1.html#lab-5-data-visualisation",
    "title": "Supervision 1",
    "section": "Lab 5 — Data Visualisation",
    "text": "Lab 5 — Data Visualisation\nAdapted from: A Guide to Data Visualisation in R for Beginners\nLink to files: course folder\n\n\nLearning outcomes\nBy the end of this lab you will be able to: 1. Explore the state.x77 dataset in R. 2. Generate basic descriptive statistics. 3. Create simple plots using base R graphics. 4. Add labels, titles, and colours to plots. 5. Compare different chart types (scatter, bar, histogram, boxplot). 6. Use multi-panel displays to visualise multiple plots at once.\n\n\n\nPrerequisites\n\nR (≥ 4.0) and RStudio.\nNo additional packages required beyond base R (optional: ggplot2 for comparison).\n\n\n\n\n🧪 Part A — Load dataset\n\nlibrary(datasets)\ndata(\"state.x77\")\n\nWarning in data(\"state.x77\"): data set 'state.x77' not found\n\nstate_data &lt;- as.data.frame(state.x77)\n\n💭 Reflect: What variables are present in state.x77? Which relate most to planning and regeneration?\n\n\n\n🧪 Part B — Data exploration\n\nstr(state_data)\n\n'data.frame':   50 obs. of  8 variables:\n $ Population: num  3615 365 2212 2110 21198 ...\n $ Income    : num  3624 6315 4530 3378 5114 ...\n $ Illiteracy: num  2.1 1.5 1.8 1.9 1.1 0.7 1.1 0.9 1.3 2 ...\n $ Life Exp  : num  69 69.3 70.5 70.7 71.7 ...\n $ Murder    : num  15.1 11.3 7.8 10.1 10.3 6.8 3.1 6.2 10.7 13.9 ...\n $ HS Grad   : num  41.3 66.7 58.1 39.9 62.6 63.9 56 54.6 52.6 40.6 ...\n $ Frost     : num  20 152 15 65 20 166 139 103 11 60 ...\n $ Area      : num  50708 566432 113417 51945 156361 ...\n\n\n💭 Reflect: How many states (rows) and variables (columns) are there? Which are continuous, and which categorical (if any)?\n\n\n\n🧪 Part C — Beginning and end of the dataset\n\nhead(state_data, 7)\n\n            Population Income Illiteracy Life Exp Murder HS Grad Frost   Area\nAlabama           3615   3624        2.1    69.05   15.1    41.3    20  50708\nAlaska             365   6315        1.5    69.31   11.3    66.7   152 566432\nArizona           2212   4530        1.8    70.55    7.8    58.1    15 113417\nArkansas          2110   3378        1.9    70.66   10.1    39.9    65  51945\nCalifornia       21198   5114        1.1    71.71   10.3    62.6    20 156361\nColorado          2541   4884        0.7    72.06    6.8    63.9   166 103766\nConnecticut       3100   5348        1.1    72.48    3.1    56.0   139   4862\n\ntail(state_data, 5)\n\n              Population Income Illiteracy Life Exp Murder HS Grad Frost  Area\nVirginia            4981   4701        1.4    70.08    9.5    47.8    85 39780\nWashington          3559   4864        0.6    71.72    4.3    63.5    32 66570\nWest Virginia       1799   3617        1.4    69.48    6.7    41.6   100 24070\nWisconsin           4589   4468        0.7    72.48    3.0    54.5   149 54464\nWyoming              376   4566        0.6    70.29    6.9    62.9   173 97203\n\n\n💭 Reflect: What differences do you see between the early and later rows?\n\n\n\n🧪 Part D — Descriptive statistics\n\nsummary(state_data)\n\n   Population        Income       Illiteracy       Life Exp    \n Min.   :  365   Min.   :3098   Min.   :0.500   Min.   :67.96  \n 1st Qu.: 1080   1st Qu.:3993   1st Qu.:0.625   1st Qu.:70.12  \n Median : 2838   Median :4519   Median :0.950   Median :70.67  \n Mean   : 4246   Mean   :4436   Mean   :1.170   Mean   :70.88  \n 3rd Qu.: 4968   3rd Qu.:4814   3rd Qu.:1.575   3rd Qu.:71.89  \n Max.   :21198   Max.   :6315   Max.   :2.800   Max.   :73.60  \n     Murder          HS Grad          Frost             Area       \n Min.   : 1.400   Min.   :37.80   Min.   :  0.00   Min.   :  1049  \n 1st Qu.: 4.350   1st Qu.:48.05   1st Qu.: 66.25   1st Qu.: 36985  \n Median : 6.850   Median :53.25   Median :114.50   Median : 54277  \n Mean   : 7.378   Mean   :53.11   Mean   :104.46   Mean   : 70736  \n 3rd Qu.:10.675   3rd Qu.:59.15   3rd Qu.:139.75   3rd Qu.: 81163  \n Max.   :15.100   Max.   :67.30   Max.   :188.00   Max.   :566432  \n\n\n💭 Reflect: Which socio-economic indicators show the widest spread?\n\n\n\n🧪 Part E — Graphics package\n\nlibrary(help = \"graphics\")\n\n💭 Reflect: From the help index, which plotting functions could be useful for socio-economic indicators?\n\n\n\n🧪 Part F — Plotting a single column\n\nplot(state_data$Population)\n\n\n\n\n\n\n\n\n💭 Reflect: What does this reveal about the distribution of state populations?\n\n\n\n🧪 Part G — Scatterplots\n\nplot(state_data$Income, state_data$Illiteracy)\n\n\n\n\n\n\n\n\n💭 Reflect: Do states with higher income tend to have lower illiteracy rates?\n\n\n\n🧪 Part H — Entire dataset plot\n\nplot(state_data)\n\n\n\n\n\n\n\n\n💭 Reflect: Which pairs of socio-economic indicators appear strongly related?\n\n\n\n🧪 Part I — Points and lines\n\nplot(state_data$`Life Exp`, type = \"b\")\n\n\n\n\n\n\n\nplot(state_data$`Life Exp`, type = \"h\")\n\n\n\n\n\n\n\n\n💭 Reflect: Which representation communicates variation in life expectancy more clearly?\n\n\n\n🧪 Part J — Help\n\n?plot\n\nstarting httpd help server ... done\n\n\n💭 Reflect: Identify one new argument from the help page that could improve your plot.\n\n\n\n🧪 Part K — Labels and titles\n\nplot(state_data$Income,\n     xlab = \"State Index\",\n     ylab = \"Per Capita Income\",\n     main = \"Income levels across US states\",\n     col = \"blue\")\n\n\n\n\n\n\n\n\n💭 Reflect: Do the labels improve clarity? Suggest improvements if needed.\n\n\n\n🧪 Part L — Horizontal bar plot\n\nbarplot(state_data$Murder,\n        main = \"Murder Rate by State\",\n        xlab = \"Murder arrests per 100,000\",\n        col = \"purple\",\n        horiz = TRUE)\n\n\n\n\n\n\n\n\n💭 Reflect: Which states stand out with particularly high murder rates?\n\n\n\n🧪 Part M — Vertical bar plot\n\nbarplot(state_data$Illiteracy,\n        main = \"Illiteracy Rate by State\",\n        xlab = \"% Illiteracy\",\n        col = \"orange\",\n        horiz = FALSE)\n\n\n\n\n\n\n\n\n💭 Reflect: How might this plot inform discussions on educational policy?\n\n\n\n🧪 Part N — Histograms\n\nhist(state_data$Income)\n\n\n\n\n\n\n\nhist(state_data$Income,\n     main = \"Distribution of State Incomes\",\n     xlab = \"Per Capita Income\",\n     col = \"green\")\n\n\n\n\n\n\n\n\n💭 Reflect: Is the income distribution symmetric, skewed, or multi-modal?\n\n\n\n🧪 Part O — Boxplots\n\nboxplot(state_data$`Life Exp`)\n\n\n\n\n\n\n\n\n💭 Reflect: What does the boxplot reveal about state-level life expectancy?\n\n\n\n🧪 Part P — Multiple boxplots\n\nboxplot(state_data[, c(\"Population\", \"Income\", \"Illiteracy\", \"Life Exp\")],\n        main = \"Socio-economic Indicators across States\")\n\n\n\n\n\n\n\n\n💭 Reflect: Which variable shows the most variability? The least?\n\n\n\n🧪 Part Q — Grid of charts\n\npar(mfrow = c(3,3), mar = c(2,5,2,1), las = 1, bty = \"n\")\n\nplot(state_data$Population)\nplot(state_data$Income, state_data$Illiteracy)\nplot(state_data$`Life Exp`, type = \"c\")\nplot(state_data$`Life Exp`, type = \"s\")\nplot(state_data$`Life Exp`, type = \"h\")\nbarplot(state_data$Income, main = \"Income levels\", col = \"blue\", horiz = TRUE)\nhist(state_data$Murder)\nboxplot(state_data$`HS Grad`)\nboxplot(state_data[, c(\"Population\", \"Income\", \"Illiteracy\", \"Life Exp\")],\n        main = \"Multiple Box plots\")\n\n\n\n\n\n\n\n\n💭 Reflect: Which plots are most useful for policy discussions? Which are least useful?\n\n\n\nBest practices\n\nAlways check the structure of socio-economic data before plotting.\nMatch plot type to variable type.\nAdd descriptive titles and labels.\nAvoid misleading graphics (bar plots for continuous data should be used cautiously).\nVisualise relationships before modelling.\n\n\n\n\nFurther visualisation packages\n\nlattice: kernel density plots\nggplot2: flexible grammar of graphics\nplotly: interactive plots\nmaps: plot country maps\n\nMore resources: towardsdatascience.com article\n\n\n\nSuggested Answers to Reflection Questions\n\nPart A: Variables include Population, Income, Illiteracy, Life Expectancy, Murder rate, HS graduation, Frost, and Area. Most relate directly to planning and socio-economic development.\nPart B: 50 rows (states) and 8 columns. All variables are numeric.\nPart C: States differ widely in population and area; later rows (western states) often have larger land areas.\nPart D: Population and Area show the widest spread.\nPart F: Populations vary dramatically; California, New York, Texas are clear outliers.\nPart G: Clear negative relationship: higher income states tend to have lower illiteracy.\nPart H: Income vs Illiteracy, Life Expectancy vs Murder, and Population vs Area show strong patterns.\nPart I: Type “b” (points and lines) is clearer for showing gradual variation than type “h” (histogram-like lines).\nPart J: Useful arguments include pch (point type) and col (colour).\nPart K: Labels help; better axis labels might specify units (e.g., dollars, years).\nPart L: Southern states often stand out with higher murder rates.\nPart M: Highlights disparities in illiteracy across regions; relevant to education policy.\nPart N: Income is slightly right-skewed; most states cluster around the middle with a few richer outliers.\nPart O: Median life expectancy around 70 years; some outliers with lower values.\nPart P: Population and Area show the most variability; Life Expectancy the least.\nPart Q: Scatterplot of Income vs Illiteracy and histogram of Murder are most useful for policy; line-type plots of Life Expectancy less so.\n\n\n\n\nSuggested Answers to Reflection Questions\n\nThese are concise, indicative answers. Local results may vary slightly depending on plotting parameters and ordering.\n\n\n\n🧪 Part A — Load dataset\n\nVariables in state.x77: Population (thousands), Income (per-capita, USD), Illiteracy (% age ≥25 illiterate), Life.Exp (years), Murder (per 100,000), HS.Grad (% high-school graduates), Frost (mean days ≤ 0°C), Area (square miles).\n\nPlanning relevance: population size/density, income, education, crime, longevity connect to regional disparities and regeneration priorities.\n\n\n\n🧪 Part B — Data exploration\n\nDimensions: 50 rows × 8 columns.\n\nAll columns are numeric/continuous; state names are row names (categorical identifier).\n\n\n\n🧪 Part C — Head/Tail\n\nEarly vs late rows simply reflect alphabetical state ordering; no time component. Values vary widely (e.g., Area, Population).\n\n\n\n🧪 Part D — Descriptive statistics\n\nWidest spreads typically in Area and Population (large range, right-skew).\n\nMurder and Illiteracy show noticeable skew and outliers.\n\n\n\n🧪 Part E — Graphics help\n\nUseful base functions: pairs(), boxplot(), hist(), barplot(), stripchart(), dotchart(), qqnorm()/qqline().\n\n\n\n🧪 Part F — Single column plot (Population)\n\nStrong right-skew: a few very populous states (CA, NY, TX) vs many smaller states. Outliers at the high end.\n\n\n\n🧪 Part G — Scatter (Income vs Illiteracy)\n\nClear negative association: higher income correlates with lower illiteracy.\n\nSome states deviate from the trend but pattern holds overall.\n\n\n\n🧪 Part H — pairs() of entire dataset\n\nNotable patterns often seen:\n\nIncome ↑ with HS.Grad and Life.Exp.\n\nMurder tends to be higher where Illiteracy is higher and HS.Grad is lower.\n\nArea weakly related to socio-economic outcomes (size ≠ prosperity).\n\n\n\n\n🧪 Part I — Types “b” vs “h” (Life.Exp)\n\ntype=\"b\" conveys point-to-point variability; type=\"h\" emphasizes magnitudes from baseline.\n\nFor life expectancy, \"b\" is generally clearer.\n\n\n\n🧪 Part J — Help\n\nExamples of useful args: pch (point symbol), cex (size), col (colour), xlim/ylim (ranges), main/sub (titles/subtitles).\n\n\n\n🧪 Part K — Labels and titles (Income)\n\nBetter labels: x = “State (index)”, y = “Per-capita income (USD)”, title = “Per-capita income by state”.\n\nColour is decorative here unless encoding a grouping.\n\n\n\n🧪 Part L — Horizontal bar plot (Murder)\n\nStates with higher values stand out (exact names depend on ordering). For rigorous identification, sort with order() or use a dotchart.\n\n\n\n🧪 Part M — Vertical bar plot (Illiteracy)\n\nHelps compare education disparities. Policy angle: target states with highest illiteracy for adult education and schooling investment.\n\n\n\n🧪 Part N — Histogram (Income)\n\nTypically unimodal, mild right-skew. Most states cluster around mid-income; a few richer states in the right tail. Bin choice affects apparent shape.\n\n\n\n🧪 Part O — Boxplot (Life.Exp)\n\nMedian around ~70 years, relatively tight IQR; lower outliers indicate states with comparatively worse health outcomes.\n\n\n\n🧪 Part P — Multiple boxplots\n\nPopulation shows largest spread; Life.Exp the tightest. Outliers are more common in Murder and Illiteracy.\n\n\n\n🧪 Part Q — Grid of charts\n\nMost informative: scatterplots for relationships (e.g., Income vs Illiteracy), and boxplots/histograms for distributions.\n\nLeast informative: unsorted barplots of continuous variables.\n\n\n\nBest practices — summaries\n\nInspect structure first; match plot to variable type; label clearly; avoid misleading encodings; explore visually before modelling.\n\nEnd of Lab 5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_1.html#lab-6-using-github-copilot-in-rstudio",
    "href": "supervision_1.html#lab-6-using-github-copilot-in-rstudio",
    "title": "Supervision 1",
    "section": "Lab 6 — Using GitHub Copilot in RStudio",
    "text": "Lab 6 — Using GitHub Copilot in RStudio\n\nGoal\nLearn to use GitHub Copilot inside RStudio to speed up routine coding, while staying in control of quality, privacy, and reproducibility.\n\n\n\nLearning outcomes\nBy the end you will be able to: 1. Enable and sign into GitHub Copilot in RStudio. 2. Accept, reject, or modify Copilot autocomplete suggestions effectively. 3. Use comment-first prompting to steer suggestions. 4. Diagnose and fix typical Copilot mistakes (wrong column names, redundant args, etc.). 5. Apply safe-use practices (privacy, determinism, avoiding “vibe coding”).\n\n\n\nPrerequisites\n\nR (≥ 4.3 recommended) and RStudio (a recent version with Copilot support).\nA GitHub account with Copilot access (student/educator plans are available).\nPackages: tidyverse, palmerpenguins, readxl, ggplot2.\n\ninstall.packages(c(\"tidyverse\", \"palmerpenguins\", \"readxl\", \"ggplot2\"))\n\nNote: Column names for the penguins dataset may differ depending on source. Treat this as a feature to practice Copilot-aware debugging.\n\n\n\n\n🧪 Part A — Set up Copilot in RStudio (10–15 min)\n\nOpen RStudio → Tools → Global Options → Copilot.\nEnable GitHub Copilot and sign in with GitHub.\nCreate a new R Script (File → New File → R Script).\nType some characters to see ghost text suggestions.\n\nTab to accept, Esc to dismiss, or keep typing to ignore.\n\n\n\n\nReflection A\nExplain in one sentence the difference between ghost text and code you’ve actually inserted.\n\n\n\n🧪 Part B — First suggestions with ggplot2 (20 min)\nWe’ll use penguins to practice.\n\nAdd a guiding comment:\n\n# Task: scatter plot of bill length (x) vs body mass (y), colour by species\n\nStart a plot:\n\nlibrary(ggplot2)\n# library(palmerpenguins)\n# penguins &lt;- palmerpenguins::penguins\n\np &lt;- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, colour = species)) +\n  geom_point()\n\nRun and, if errors occur, inspect:\n\nglimpse(penguins)\nnames(penguins)\n\nFix names if needed (bill_length_mm → bill_len).\n\n\n\nMini-exercises\n\nAdd title, caption, and axis labels:\n\n# Add a title, caption, and nicer axis labels\n\nAdd smoother:\n\n# Add a loess smoother without confidence band\n\n\nReflection B\nWhen is Copilot faster? When slower?\n\n\n\n🧪 Part C — Comment-first prompting for histograms (15 min)\n\nAdd a guiding comment:\n\n# Histogram of body mass by species, overlapping with transparency and an accessible palette\n\nInspect Copilot’s suggestion, remove redundant arguments, and adjust to:\n\ngeom_histogram(position = \"identity\", alpha = 0.5)\n\nCommit the cleaned version.\n\n\n\nReflection C\nReplace colour with fill, adjust legend, apply minimal theme.\n\n\n\n🧪 Part D — Loading local data safely (10–15 min)\nCopilot does not know your file system.\n\nSave Scooby.xlsx in a data/ folder.\nLoad explicitly:\n\nlibrary(readxl)\nscooby &lt;- read_xlsx(\"data/Scooby.xlsx\")\n\nAdd prompt:\n\n# Quick EDA: glimpse, summary, and count episodes by network\n\nEdit Copilot’s code before running.\n\n\n\nReflection D\nWhy be explicit with data loading and library imports?\n\n\n\n🧪 Part E — Boxplots (15 min)\nVisualise IMDb ratings by network.\n\nPrompt:\n\n# Boxplot of IMDb (y) by network (x); tilt x labels; use fill instead of colour\n\nEdit column names if needed.\nAdd improvements:\n\n# Make it horizontal, tidy legend, and add labs\n\n\nExtension E\nOrder networks by median rating.\n\n\n\n🧪 Part F — Best practices\n\nPrivacy: Never expose credentials/confidential data.\nNon-determinism: Review suggestions before accepting.\nNo vibe coding: Don’t accept what you don’t understand.\nContext helps: Use clean code and comments.\nReproducibility: Remove redundant args, consider renv.\n\ninstall.packages(\"renv\")\nrenv::init()\n\n\n\n🧪 Part G — Check-off & submission\n\nCopilot enabled and signed in.\nOne scatter plot (corrected column names).\nOne histogram (transparency + accessible palette).\nOne boxplot (labels/theme improved).\nReflection paragraph on Copilot.\n\nExport script or Quarto doc → submit.\n\n\n\nTA rubric\n\nSetup (10%): Copilot enabled; script compiles.\nCode quality (40%): Reviewed/edited suggestions; correct names.\nVisuals (30%): Clear labels, sensible themes.\nReflection (20%): Insightful, acknowledges limits.\n\n\n\n\nTroubleshooting\n\nSuggestions not appearing? Check Global Options → Copilot.\nWrong dataset/columns? Run names()/glimpse().\nOverconfident code? Scale back, test small steps.\n\n\n\n\nFurther practice\n\nRewrite prompts as comments for grouped summaries, joins, faceted plots.\nCompare Copilot vs manual solutions.\nTry Quarto docs where each chunk begins with a comment.\n\n\nEnd of lab 6",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Supervision 1</span>"
    ]
  },
  {
    "objectID": "supervision_2.html",
    "href": "supervision_2.html",
    "title": "Supervision 2",
    "section": "",
    "text": "Lab 1 — The Simple Linear Regression Model\nSummary. In simple linear regression, we use one independent variable to predict a dependent variable. The relationship is represented by a straight line with an intercept and a slope.\nIntroduction. We explore the fundamentals of the Simple Linear Regression Model, a method to understand the relationship between two variables. This model is foundational for more advanced analyses.\nKey terms. The dependent variable ((y)) is what we aim to predict; the independent variable ((x)) explains (y).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#the-general-model",
    "href": "supervision_2.html#the-general-model",
    "title": "Supervision 2",
    "section": "The General Model",
    "text": "The General Model\nAssume a linear relationship between the conditional expectation of (y) and (x):\n\\[\ny_i = \\beta_1 + \\beta_2 x_i + e_i.\\tag{1}\n\\]\n\n(_1): intercept, (_2): slope\n\n(e_i): error term with variance (^2)\n\n(i=1,,N): observation index\n\nThe predicted (estimated) value of (y) given (x) is:\n\\[\n\\hat y = b_1 + b_2 x.\\tag{2}\n\\]\nAssumptions: (i) non-random (x); (ii) constant error variance (homoskedasticity); (iii) errors uncorrelated across observations; (iv) (E[e_ix_i]=0).\n\nExample: Food Expenditure vs Income\n\n# Install once if needed:\n# install.packages(\"remotes\")\n# remotes::install_github(\"ccolonescu/PoEdata\")\n\nlibrary(PoEdata)\ndata(\"cps_small\")\nplot(cps_small$educ, cps_small$wage, xlab=\"education\", ylab=\"wage\")\n\n\n\n\n\n\n\n# Food data\ndata(\"food\")\nhead(food)\n\n  food_exp income\n1   115.22   3.69\n2   135.98   4.39\n3   119.34   4.75\n4   114.96   6.03\n5   187.05  12.47\n6   243.92  12.98\n\nplot(food$income, food$food_exp,\n     ylim=c(0, max(food$food_exp)),\n     xlim=c(0, max(food$income)),\n     xlab=\"weekly income in $100\", ylab=\"weekly food expenditure in $\",\n     type=\"p\")\n\n\n\n\n\n\n\n\n\n\nEstimating a Linear Regression\nFor the food data the model is\n\\[\n\\text{food\\_exp}_i = \\beta_1 + \\beta_2\\,\\text{income}_i + e_i.\\tag{3}\n\\]\n\nlibrary(PoEdata)\nmod1 &lt;- lm(food_exp ~ income, data = food)\nb1 &lt;- coef(mod1)[[1]]\nb2 &lt;- coef(mod1)[[2]]\nsmod1 &lt;- summary(mod1)\nsmod1\n\n\nCall:\nlm(formula = food_exp ~ income, data = food)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-223.025  -50.816   -6.324   67.879  212.044 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   83.416     43.410   1.922   0.0622 .  \nincome        10.210      2.093   4.877 1.95e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 89.52 on 38 degrees of freedom\nMultiple R-squared:  0.385, Adjusted R-squared:  0.3688 \nF-statistic: 23.79 on 1 and 38 DF,  p-value: 1.946e-05\n\n\nAdd the regression line to the scatter plot:\n\nplot(food$income, food$food_exp,\n     ylim=c(0, max(food$food_exp)),\n     xlim=c(0, max(food$income)),\n     xlab=\"weekly income in $100\", ylab=\"weekly food expenditure in $\",\n     type = \"p\")\nabline(b1, b2)\n\n\n\n\n\n\n\n\nRetrieve common results:\n\nnames(mod1)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\nnames(smod1)\n\n [1] \"call\"          \"terms\"         \"residuals\"     \"coefficients\" \n [5] \"aliased\"       \"sigma\"         \"df\"            \"r.squared\"    \n [9] \"adj.r.squared\" \"fstatistic\"    \"cov.unscaled\" \n\nmod1$coefficients\n\n(Intercept)      income \n   83.41600    10.20964 \n\nsmod1$coefficients\n\n            Estimate Std. Error  t value     Pr(&gt;|t|)\n(Intercept) 83.41600  43.410163 1.921578 6.218242e-02\nincome      10.20964   2.093264 4.877381 1.945862e-05\n\n\n\n\nMCQs\n\nWhat relationship does the simple linear regression assume between (y) and (x)?\nA. Quadratic    B. Logarithmic    C. Linear    D. Exponential\nIn Eq. (1), what is (_1)?\nA. Slope    B. Error term    C. Intercept    D. Dependent variable\nThe slope parameter indicates:\nA. Error variance    B. Change in (y) for a one-unit change in (x)    C. Intercept    D. Sample size\n“Residuals” are:\nA. Predicted (y)    B. (x) values    C. Observed minus predicted (y)    D. Coefficients\nsummary(mod1) is used to:\nA. List object names    B. Change coefficients    C. Plot the line    D. Display regression results\nEstimating with random subsamples primarily helps to:\nA. Change coefficients    B. Assess variability of coefficients    C. Increase N    D. Make the model non‑linear\nAdjusted (R^2) measures:\nA. Number of observations    B. Precision of intercept    C. Proportion of variance explained (adjusted)    D. SE of coefficients",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#repeated-samples-to-assess-regression-coefficients",
    "href": "supervision_2.html#repeated-samples-to-assess-regression-coefficients",
    "title": "Supervision 2",
    "section": "Repeated Samples to Assess Regression Coefficients",
    "text": "Repeated Samples to Assess Regression Coefficients\n\nN &lt;- nrow(food) # number of observations\nC &lt;- 50         # number of subsamples\nS &lt;- 38         # subsample size\n\nsumb2 &lt;- 0\nfor (i in 1:C){\n  set.seed(3*i)\n  subsample &lt;- food[sample(1:N, size=S, replace=TRUE), ]\n  mod2 &lt;- lm(food_exp ~ income, data=subsample)\n  sumb2 &lt;- sumb2 + coef(mod2)[[2]]\n}\nprint(sumb2/C, digits = 3)\n\n[1] 9.89",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#estimated-variances-and-covariance-of-coefficients",
    "href": "supervision_2.html#estimated-variances-and-covariance-of-coefficients",
    "title": "Supervision 2",
    "section": "Estimated Variances and Covariance of Coefficients",
    "text": "Estimated Variances and Covariance of Coefficients\n\n(varb1 &lt;- vcov(mod1)[1, 1])\n\n[1] 1884.442\n\n(varb2 &lt;- vcov(mod1)[2, 2])\n\n[1] 4.381752\n\n(covb1b2 &lt;- vcov(mod1)[1, 2])\n\n[1] -85.90316",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#non-linear-relationships",
    "href": "supervision_2.html#non-linear-relationships",
    "title": "Supervision 2",
    "section": "Non-Linear Relationships",
    "text": "Non-Linear Relationships\n\nQuadratic model\n\\[\ny_i = \\beta_1 + \\beta_2 x_i^2 + e_i.\\tag{5}\n\\]\n\nlibrary(PoEdata)\ndata(br)\nmod3 &lt;- lm(price ~ I(sqft^2), data=br)\nb1 &lt;- coef(mod3)[[1]]\nb2 &lt;- coef(mod3)[[2]]\n\nsqftx &lt;- c(2000, 4000, 6000)\npricex &lt;- b1 + b2*sqftx^2\nDpriceDsqft &lt;- 2*b2*sqftx\nelasticity &lt;- DpriceDsqft*sqftx/pricex\n\nb1; b2; DpriceDsqft; elasticity\n\n[1] 55776.57\n\n\n[1] 0.0154213\n\n\n[1]  61.68521 123.37041 185.05562\n\n\n[1] 1.050303 1.631251 1.817408\n\n\nPlotting alternatives:\n\nmod31 &lt;- lm(price ~ I(sqft^2), data=br)\nplot(br$sqft, br$price, xlab=\"Total square feet\", ylab=\"Sale price, $\", col=\"grey\")\ncurve(b1 + b2*x^2, add=TRUE)\n\n\n\n\n\n\n\n\n\nordat &lt;- br[order(br$sqft), ]\nmod31 &lt;- lm(price ~ I(sqft^2), data=ordat)\nplot(br$sqft, br$price, main=\"Dataset ordered after 'sqft'\",\n     xlab=\"Total square feet\", ylab=\"Sale price, $\", col=\"grey\")\nlines(fitted(mod31) ~ ordat$sqft)\n\n\n\n\n\n\n\n\n\n\nLog-linear model\n\\[\n\\log(y_i) = \\beta_1 + \\beta_2 x_i + e_i.\\tag{6}\n\\]\n\nhist(br$price)\n\n\n\n\n\n\n\nhist(log(br$price))\n\n\n\n\n\n\n\nmod4 &lt;- lm(log(price) ~ sqft, data=br)\nb1 &lt;- coef(mod4)[[1]]\nb2 &lt;- coef(mod4)[[2]]\n\n# Fitted curve on original price scale\nordat &lt;- br[order(br$sqft), ]\nmod4 &lt;- lm(log(price) ~ sqft, data=ordat)\nplot(br$sqft, br$price, col=\"grey\")\nlines(exp(fitted(mod4)) ~ ordat$sqft)\n\n\n\n\n\n\n\n\nElasticity and marginal effect at the median price:\n\npricex &lt;- median(br$price)\nsqftx &lt;- (log(pricex) - coef(mod4)[[1]])/coef(mod4)[[2]]\n(DyDx &lt;- pricex*coef(mod4)[[2]])\n\n[1] 53.46495\n\n(elasticity &lt;- sqftx*coef(mod4)[[2]])\n\n[1] 0.9366934\n\n\nMultiple points:\n\nb1 &lt;- coef(mod4)[[1]]\nb2 &lt;- coef(mod4)[[2]]\nsqftx &lt;- c(2000, 3000, 4000)\npricex &lt;- c(100000, exp(b1 + b2*sqftx))\nsqftx &lt;- (log(pricex) - b1)/b2\n(elasticities &lt;- b2*sqftx)\n\n[1] 0.6743291 0.8225377 1.2338066 1.6450754\n\n\n\n\nMCQs\n\nUsing (b_1) and (b_2) primarily helps to: B. Predict (E[yx])\n\nlm() is used to: C. Estimate a linear model\n\npredict() mainly: B. Estimates (y) for new data\n\nCoefficients are random because: C. They depend on the sample\n\nRandom subsamples help: C. Evaluate stability/variability\n\nvcov() is for: B. Variances and covariances of coefficients\n\ndata.frame() with predict() to: A. Format new (x) values",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#hypothesis-tests",
    "href": "supervision_2.html#hypothesis-tests",
    "title": "Supervision 2",
    "section": "Hypothesis Tests",
    "text": "Hypothesis Tests\nNull vs alternative for a coefficient (_k):\n\\[\nH_0: \\beta_k = c, \\qquad H_A: \\beta_k \\ne c.\n\\]\nTest statistic: \\[\nt = \\frac{b_k - c}{\\operatorname{se}(b_k)},\\quad t \\sim t_{N-2}.\\tag{6}\n\\]\nExample for (b_2) in the food model:\n\nalpha &lt;- 0.05\nlibrary(PoEdata); library(xtable); library(knitr)\n\nWarning: package 'xtable' was built under R version 4.4.3\n\n\nWarning: package 'knitr' was built under R version 4.4.3\n\ndata(\"food\")\nmod1 &lt;- lm(food_exp ~ income, data=food); smod1 &lt;- summary(mod1)\n\ntable &lt;- data.frame(xtable(mod1))\nkable(table, caption=\"Regression output showing the coefficients\")\n\n\nRegression output showing the coefficients\n\n\n\nEstimate\nStd..Error\nt.value\nPr…t..\n\n\n\n\n(Intercept)\n83.41600\n43.410163\n1.921578\n0.0621824\n\n\nincome\n10.20964\n2.093263\n4.877381\n0.0000195\n\n\n\n\nb2 &lt;- coef(mod1)[[\"income\"]]\nseb2 &lt;- sqrt(vcov(mod1)[2,2])\ndf  &lt;- df.residual(mod1)\n\nt   &lt;- b2/seb2\ntcr &lt;- qt(1-alpha/2, df)\nt; tcr\n\n[1] 4.877381\n\n\n[1] 2.024394\n\n\nRight‑tail and left‑tail versions:\n\n# Right-tail: H0: beta2 &lt;= 5.5; HA: beta2 &gt; 5.5\nc &lt;- 5.5\nt_right &lt;- (b2 - c)/seb2\ntcr_right &lt;- qt(1-alpha, df)\n\n# Left-tail: H0: beta2 &gt;= 15; HA: beta2 &lt; 15\nc &lt;- 15\nt_left &lt;- (b2 - c)/seb2\ntcr_left &lt;- qt(alpha, df)\n\nc(t_right=t_right, tcr_right=tcr_right, t_left=t_left, tcr_left=tcr_left)\n\n  t_right tcr_right    t_left  tcr_left \n 2.249904  1.685954 -2.288463 -1.685954",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#the-pvalue",
    "href": "supervision_2.html#the-pvalue",
    "title": "Supervision 2",
    "section": "The p‑Value",
    "text": "The p‑Value\nRight‑tail: (p = 1 - F_t(t)). Left‑tail: (p = F_t(t)). Two‑tail: (p = 2(1-F_t(|t|))).\n\n# Right tail\nc &lt;- 5.5; t &lt;- (b2-c)/seb2; p_right &lt;- 1-pt(t, df)\n\n# Left tail\nc &lt;- 15; t &lt;- (b2-c)/seb2; p_left &lt;- pt(t, df)\n\n# Two tail\nc &lt;- 0;  t &lt;- (b2-c)/seb2; p_two &lt;- 2*(1-pt(abs(t), df))\n\nc(p_right=p_right, p_left=p_left, p_two=p_two)\n\n     p_right       p_left        p_two \n1.516329e-02 1.388071e-02 1.945862e-05",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_2.html#testing-linear-combinations-of-parameters",
    "href": "supervision_2.html#testing-linear-combinations-of-parameters",
    "title": "Supervision 2",
    "section": "Testing Linear Combinations of Parameters",
    "text": "Testing Linear Combinations of Parameters\nExpected food expenditure at income = $2000 (i.e. (x=20)):\n\\[\nL = E(\\text{food\\_exp}\\mid \\text{income}=20) = \\beta_1 + 20\\,\\beta_2.\\tag{3.7}\n\\]\nVariance identities:\n\\[\n\\operatorname{var}(aX+bY) = a^2\\,\\operatorname{var}(X) + b^2\\,\\operatorname{var}(Y) + 2ab\\,\\operatorname{cov}(X,Y).\\tag{3.8}\n\\]\n\\[\n\\operatorname{var}(b_1+20b_2) = \\operatorname{var}(b_1) + 20^2\\operatorname{var}(b_2) + 2\\cdot20\\operatorname{cov}(b_1,b_2).\\tag{3.9}\n\\]\n\nalpha &lt;- 0.05; x &lt;- 20\nm1 &lt;- lm(food_exp ~ income, data=food)\ndf &lt;- df.residual(m1)\n\nb1 &lt;- m1$coef[1]; b2 &lt;- m1$coef[2]\nvarb1 &lt;- vcov(m1)[1,1]; varb2 &lt;- vcov(m1)[2,2]; covb1b2 &lt;- vcov(m1)[1,2]\n\nL &lt;- b1 + b2*x\nvarL &lt;- varb1 + x^2 * varb2 + 2*x*covb1b2\nseL &lt;- sqrt(varL)\n\ntcr &lt;- qt(1-alpha/2, df)\nlowbL &lt;- L - tcr*seL; upbL &lt;- L + tcr*seL\nc(L=L, seL=seL, low=lowbL, up=upbL)\n\n  L.(Intercept)             seL low.(Intercept)  up.(Intercept) \n      287.60886        14.17804       258.90692       316.31081 \n\n\nTwo‑tail, left‑tail, right‑tail tests for (L):\n\nc &lt;- 250\nt &lt;- (L - c)/seL\np_value &lt;- 2*(1-pt(abs(t), df))\nc(t=t, p_value=p_value)\n\n      t.(Intercept) p_value.(Intercept) \n         2.65261316          0.01159078",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supervision 2</span>"
    ]
  },
  {
    "objectID": "supervision_3.html",
    "href": "supervision_3.html",
    "title": "Supervision 3",
    "section": "",
    "text": "Lab 1 — Data Prep for Variable Selection (Hitters)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  },
  {
    "objectID": "supervision_3.html#lab-1-data-prep-for-variable-selection-hitters",
    "href": "supervision_3.html#lab-1-data-prep-for-variable-selection-hitters",
    "title": "Supervision 3",
    "section": "",
    "text": "🎯 Learning outcomes\n\nLoad the Hitters data and inspect dimensions.\nHandle missing values (Salary) to avoid errors in model fitting.\nGet comfortable with the packages we’ll use: ISLR and leaps.\n\n\n\n🧰 Prerequisites\n\nR and RStudio installed.\nPackages: ISLR, leaps.\n\n\n# install.packages(c(\"ISLR\",\"leaps\")) # if needed\nlibrary(ISLR)\n\nWarning: package 'ISLR' was built under R version 4.4.3\n\ndata(Hitters)\n\n# Inspect\nnames(Hitters)\n\n [1] \"AtBat\"     \"Hits\"      \"HmRun\"     \"Runs\"      \"RBI\"       \"Walks\"    \n [7] \"Years\"     \"CAtBat\"    \"CHits\"     \"CHmRun\"    \"CRuns\"     \"CRBI\"     \n[13] \"CWalks\"    \"League\"    \"Division\"  \"PutOuts\"   \"Assists\"   \"Errors\"   \n[19] \"Salary\"    \"NewLeague\"\n\ndim(Hitters)          # rows x columns\n\n[1] 322  20\n\nsum(is.na(Hitters$Salary))\n\n[1] 59\n\n# Drop rows with any NA (Salary has some NAs)\nHitters &lt;- na.omit(Hitters)\ndim(Hitters)\n\n[1] 263  20\n\nsum(is.na(Hitters))\n\n[1] 0\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe remove rows with missing Salary because selection routines (like regsubsets) require complete cases.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  },
  {
    "objectID": "supervision_3.html#lab-2-best-subset-selection",
    "href": "supervision_3.html#lab-2-best-subset-selection",
    "title": "Supervision 3",
    "section": "Lab 2 — Best Subset Selection",
    "text": "Lab 2 — Best Subset Selection\n\n🎯 Learning outcomes\n\nFit best subset models with regsubsets().\nRetrieve the best model for each size.\nInspect classical metrics: RSS, R², Adjusted R², Cp, BIC.\n\n\nlibrary(leaps)\n\nWarning: package 'leaps' was built under R version 4.4.3\n\n# Exhaustive search over all subsets\nregfit.full &lt;- regsubsets(Salary ~ ., data = Hitters, nvmax = 19)\nreg.summary &lt;- summary(regfit.full)\n\n# What does summary() return?\nnames(reg.summary)\n\n[1] \"which\"  \"rsq\"    \"rss\"    \"adjr2\"  \"cp\"     \"bic\"    \"outmat\" \"obj\"   \n\n# Quick look at R^2 growth as we add variables\nreg.summary$rsq\n\n [1] 0.3214501 0.4252237 0.4514294 0.4754067 0.4908036 0.5087146 0.5141227\n [8] 0.5285569 0.5346124 0.5404950 0.5426153 0.5436302 0.5444570 0.5452164\n[15] 0.5454692 0.5457656 0.5459518 0.5460945 0.5461159\n\n\n\n\n\n\n\n\nTip\n\n\n\nregsubsets() searches the model space and stores the best model for each size (1..nvmax). Use summary() to see a which matrix and metrics across sizes.\n\n\n\n\nVisual diagnostics for choosing model size\n\npar(mfrow = c(2,2))\n\n# RSS\nplot(reg.summary$rss, xlab = \"Number of Variables\", ylab = \"RSS\", type = \"l\")\n\n# Adjusted R^2 (highlight maximum)\nplot(reg.summary$adjr2, xlab = \"Number of Variables\", ylab = \"Adjusted R^2\", type = \"l\")\nbest.adjr2 &lt;- which.max(reg.summary$adjr2)\npoints(best.adjr2, reg.summary$adjr2[best.adjr2], col = \"red\", cex = 2, pch = 20)\n\n# Cp (highlight minimum)\nplot(reg.summary$cp, xlab = \"Number of Variables\", ylab = \"Cp\", type = \"l\")\nbest.cp &lt;- which.min(reg.summary$cp)\npoints(best.cp, reg.summary$cp[best.cp], col = \"red\", cex = 2, pch = 20)\n\n# BIC (highlight minimum)\nplot(reg.summary$bic, xlab = \"Number of Variables\", ylab = \"BIC\", type = \"l\")\nbest.bic &lt;- which.min(reg.summary$bic)\npoints(best.bic, reg.summary$bic[best.bic], col = \"red\", cex = 2, pch = 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRule of thumb: prefer the model size where Adjusted R² peaks, or Cp/BIC are minimized. These are proxies for test error.\n\n\n\n\nInspect variables in the chosen model(s)\n\n# Example: variables in the BIC-optimal model\ncoef(regfit.full, best.bic)\n\n (Intercept)        AtBat         Hits        Walks         CRBI    DivisionW \n  91.5117981   -1.8685892    7.6043976    3.6976468    0.6430169 -122.9515338 \n     PutOuts \n   0.2643076 \n\n# regsubsets has its own plot helper:\nplot(regfit.full, scale = \"bic\")\n\n\n\n\n\n\n\nplot(regfit.full, scale = \"adjr2\")\n\n\n\n\n\n\n\nplot(regfit.full, scale = \"Cp\")\n\n\n\n\n\n\n\nplot(regfit.full, scale = \"r2\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  },
  {
    "objectID": "supervision_3.html#lab-3-forward-stepwise-selection",
    "href": "supervision_3.html#lab-3-forward-stepwise-selection",
    "title": "Supervision 3",
    "section": "Lab 3 — Forward Stepwise Selection",
    "text": "Lab 3 — Forward Stepwise Selection\n\n🎯 Learning outcomes\n\nRun forward stepwise selection using method = \"forward\".\nCompare chosen variables to best subset at the same size.\n\n\nregfit.fwd &lt;- regsubsets(Salary ~ ., data = Hitters, nvmax = 19, method = \"forward\")\nsummary(regfit.fwd)\n\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"forward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: forward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n4  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n\n# Compare a specific size (e.g., 7 variables) across methods\ncoef(regfit.full, 7)  # best subset\n\n (Intercept)         Hits        Walks       CAtBat        CHits       CHmRun \n  79.4509472    1.2833513    3.2274264   -0.3752350    1.4957073    1.4420538 \n   DivisionW      PutOuts \n-129.9866432    0.2366813 \n\ncoef(regfit.fwd, 7)   # forward stepwise\n\n (Intercept)        AtBat         Hits        Walks         CRBI       CWalks \n 109.7873062   -1.9588851    7.4498772    4.9131401    0.8537622   -0.3053070 \n   DivisionW      PutOuts \n-127.1223928    0.2533404 \n\n\n\n\n\n\n\n\nWarning\n\n\n\nForward stepwise is greedy: after a variable enters, it stays. It evaluates far fewer models than best subset—great for speed—but it may miss the global optimum.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  },
  {
    "objectID": "supervision_3.html#lab-4-backward-stepwise-selection",
    "href": "supervision_3.html#lab-4-backward-stepwise-selection",
    "title": "Supervision 3",
    "section": "Lab 4 — Backward Stepwise Selection",
    "text": "Lab 4 — Backward Stepwise Selection\n\n🎯 Learning outcomes\n\nRun backward stepwise selection using method = \"backward\".\nUnderstand when backward is not applicable.\n\n\nregfit.bwd &lt;- regsubsets(Salary ~ ., data = Hitters, nvmax = 19, method = \"backward\")\nsummary(regfit.bwd)\n\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"backward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: backward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n4  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n\n# Compare at size 7 again\ncoef(regfit.bwd, 7)   # backward stepwise\n\n (Intercept)        AtBat         Hits        Walks        CRuns       CWalks \n 105.6487488   -1.9762838    6.7574914    6.0558691    1.1293095   -0.7163346 \n   DivisionW      PutOuts \n-116.1692169    0.3028847 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nBackward stepwise starts from the full model and removes variables. It requires n &gt; p so that the full least squares fit exists.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  },
  {
    "objectID": "supervision_3.html#lab-5-reading-the-plots-coefficients-like-a-pro",
    "href": "supervision_3.html#lab-5-reading-the-plots-coefficients-like-a-pro",
    "title": "Supervision 3",
    "section": "Lab 5 — Reading the Plots & Coefficients Like a Pro",
    "text": "Lab 5 — Reading the Plots & Coefficients Like a Pro\n\n🎯 Learning outcomes\n\nInterpret selection plots (BIC, Cp, Adjusted R² panels).\nExtract and report the final model clearly.\n\n\n# Choose a final size by any one of the criteria\nk_final &lt;- best.bic     # example: BIC-minimizer\n\n# Coefficients and variables\nfinal_coef &lt;- coef(regfit.full, k_final)\nfinal_coef\n\n (Intercept)        AtBat         Hits        Walks         CRBI    DivisionW \n  91.5117981   -1.8685892    7.6043976    3.6976468    0.6430169 -122.9515338 \n     PutOuts \n   0.2643076 \n\n# A compact report\ndata.frame(term = names(final_coef), estimate = as.numeric(final_coef))\n\n         term     estimate\n1 (Intercept)   91.5117981\n2       AtBat   -1.8685892\n3        Hits    7.6043976\n4       Walks    3.6976468\n5        CRBI    0.6430169\n6   DivisionW -122.9515338\n7     PutOuts    0.2643076\n\n\n\n\n\n\n\n\nTip\n\n\n\nReporting tip: Always state (i) the criterion used (e.g., BIC), (ii) the model size, and (iii) the selected variables with their coefficients. Avoid training R² alone—prefer Cp/BIC/Adjusted R².\n\n\n\n\n\n✅ What you should now be able to do\n\nPrepare data and run best subset and stepwise selection.\nUse Adjusted R², Cp, and BIC to choose model size.\nExtract and communicate the chosen variables and coefficients.\n\n\nNext session we’ll compare these selections using a validation set and cross‑validation, and then move to ridge and lasso.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Supervision 3</span>"
    ]
  }
]